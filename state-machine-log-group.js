"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomStateMachineLogGroupConstruct = exports.CustomStateMachineLogGroupSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const constructs_1 = require("constructs");
const dotenv = require("dotenv");
const zod_1 = require("zod");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
dotenv.config();
const utils = new utils_1.PulsifiUtils();
/**
 * CustomStateMachineLogGroupSchema
 *
 * Properties for a customised LogGroup \
 * removalPolicy with default RemovalPolicy.RETAIN
 *
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 * @param stateMachineName
 * @param removalPolicy {@link RemovalPolicy}
 */
exports.CustomStateMachineLogGroupSchema = resource_tag_1.CustomResourceTagSchema.extend({
    stateMachineName: zod_1.z.string().min(1).max(489),
    removalPolicy: zod_1.z.optional(zod_1.z.nativeEnum(aws_cdk_lib_1.RemovalPolicy)),
}).omit({ resourceName: true });
class CustomStateMachineLogGroupConstruct extends constructs_1.Construct {
    /**
     * CustomStateMachineLogGroupConstruct \
     *
     * CAUTION!!! \
     * Please choose the Log Group removalPolicy wisely. \
     * RETAIN = log group will remain if cdk destroy, Change stateMachineName for next deploy to avoid stackrollback \
     * DESTROY = log group will delete once cdk destroy
     *
     * @readonly logGroup
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomApiLogGroupProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomStateMachineLogGroupSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        let customLogRetention = aws_logs_1.RetentionDays.ONE_MONTH;
        if (process.env.NODE_ENV === utils_1.AwsEnvironment.PRODUCTION) {
            customLogRetention = aws_logs_1.RetentionDays.THREE_MONTHS;
        }
        const logGroupName = `/aws/vendedlogs/states/${props.stateMachineName}`;
        this.logGroup = new aws_logs_1.LogGroup(this, "LogGroup", {
            logGroupName,
            retention: customLogRetention,
            removalPolicy: props.removalPolicy ?? aws_cdk_lib_1.RemovalPolicy.RETAIN,
        });
        new resource_tag_1.CustomResourceTagConstruct(this, "Tagging", {
            construct: this.logGroup,
            awsEnvironment: props.awsEnvironment,
            resourceOwner: props.resourceOwner,
            resourceName: logGroupName,
        });
    }
}
exports.CustomStateMachineLogGroupConstruct = CustomStateMachineLogGroupConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtbWFjaGluZS1sb2ctZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvc3RhdGUtbWFjaGluZS1sb2ctZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTRDO0FBQzVDLG1EQUErRDtBQUMvRCwyQ0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLDZCQUF3QjtBQUN4QixpREFHd0I7QUFDeEIsbUNBQXVEO0FBRXZELE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVoQixNQUFNLEtBQUssR0FBRyxJQUFJLG9CQUFZLEVBQUUsQ0FBQztBQUVqQzs7Ozs7Ozs7OztHQVVHO0FBQ1UsUUFBQSxnQ0FBZ0MsR0FBRyxzQ0FBdUIsQ0FBQyxNQUFNLENBQUM7SUFDOUUsZ0JBQWdCLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzVDLGFBQWEsRUFBRSxPQUFDLENBQUMsUUFBUSxDQUFDLE9BQUMsQ0FBQyxVQUFVLENBQUMsMkJBQWEsQ0FBQyxDQUFDO0NBQ3RELENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQWdCaEMsTUFBYSxtQ0FBb0MsU0FBUSxzQkFBUztJQUdqRTs7Ozs7Ozs7Ozs7OztPQWFHO0lBQ0gsWUFDQyxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBc0M7UUFFdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBRzdDLHdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFFRCxJQUFJLGtCQUFrQixHQUFHLHdCQUFhLENBQUMsU0FBUyxDQUFDO1FBQ2pELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssc0JBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN4RCxrQkFBa0IsR0FBRyx3QkFBYSxDQUFDLFlBQVksQ0FBQztRQUNqRCxDQUFDO1FBRUQsTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXhFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDOUMsWUFBWTtZQUNaLFNBQVMsRUFBRSxrQkFBa0I7WUFDN0IsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLElBQUksMkJBQWEsQ0FBQyxNQUFNO1NBQzFELENBQUMsQ0FBQztRQUVILElBQUkseUNBQTBCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUMvQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDeEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxZQUFZLEVBQUUsWUFBWTtTQUMxQixDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Q7QUFwREQsa0ZBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVtb3ZhbFBvbGljeSB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgTG9nR3JvdXAsIFJldGVudGlvbkRheXMgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxvZ3NcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7XG5cdEN1c3RvbVJlc291cmNlVGFnQ29uc3RydWN0LFxuXHRDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYSxcbn0gZnJvbSBcIi4vcmVzb3VyY2UtdGFnXCI7XG5pbXBvcnQgeyBBd3NFbnZpcm9ubWVudCwgUHVsc2lmaVV0aWxzIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuXG5jb25zdCB1dGlscyA9IG5ldyBQdWxzaWZpVXRpbHMoKTtcblxuLyoqXG4gKiBDdXN0b21TdGF0ZU1hY2hpbmVMb2dHcm91cFNjaGVtYVxuICpcbiAqIFByb3BlcnRpZXMgZm9yIGEgY3VzdG9taXNlZCBMb2dHcm91cCBcXFxuICogcmVtb3ZhbFBvbGljeSB3aXRoIGRlZmF1bHQgUmVtb3ZhbFBvbGljeS5SRVRBSU5cbiAqXG4gKiBAcGFyYW0gYXdzRW52aXJvbm1lbnQge0BsaW5rIEF3c0Vudmlyb25tZW50fVxuICogQHBhcmFtIHJlc291cmNlT3duZXIge0BsaW5rIFB1bHNpZmlUZWFtfVxuICogQHBhcmFtIHN0YXRlTWFjaGluZU5hbWVcbiAqIEBwYXJhbSByZW1vdmFsUG9saWN5IHtAbGluayBSZW1vdmFsUG9saWN5fVxuICovXG5leHBvcnQgY29uc3QgQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBTY2hlbWEgPSBDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYS5leHRlbmQoe1xuXHRzdGF0ZU1hY2hpbmVOYW1lOiB6LnN0cmluZygpLm1pbigxKS5tYXgoNDg5KSxcblx0cmVtb3ZhbFBvbGljeTogei5vcHRpb25hbCh6Lm5hdGl2ZUVudW0oUmVtb3ZhbFBvbGljeSkpLFxufSkub21pdCh7IHJlc291cmNlTmFtZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBDdXN0b21TdGF0ZU1hY2hpbmVMb2dHcm91cFByb3BzXG4gKlxuICogUHJvcGVydGllcyBmb3IgYSBjdXN0b21pc2VkIExvZ0dyb3VwXG4gKlxuICogQHBhcmFtIGF3c0Vudmlyb25tZW50IHtAbGluayBBd3NFbnZpcm9ubWVudH1cbiAqIEBwYXJhbSByZXNvdXJjZU93bmVyIHtAbGluayBQdWxzaWZpVGVhbX1cbiAqIEBwYXJhbSBzdGF0ZU1hY2hpbmVOYW1lXG4gKiBAcGFyYW0gcmVtb3ZhbFBvbGljeSB7QGxpbmsgUmVtb3ZhbFBvbGljeX1cbiAqL1xuZXhwb3J0IHR5cGUgQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBQcm9wcyA9IHouaW5mZXI8XG5cdHR5cGVvZiBDdXN0b21TdGF0ZU1hY2hpbmVMb2dHcm91cFNjaGVtYVxuPjtcblxuZXhwb3J0IGNsYXNzIEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwQ29uc3RydWN0IGV4dGVuZHMgQ29uc3RydWN0IHtcblx0cHVibGljIHJlYWRvbmx5IGxvZ0dyb3VwOiBMb2dHcm91cDtcblxuXHQvKipcblx0ICogQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBDb25zdHJ1Y3QgXFxcblx0ICpcblx0ICogQ0FVVElPTiEhISBcXFxuXHQgKiBQbGVhc2UgY2hvb3NlIHRoZSBMb2cgR3JvdXAgcmVtb3ZhbFBvbGljeSB3aXNlbHkuIFxcXG5cdCAqIFJFVEFJTiA9IGxvZyBncm91cCB3aWxsIHJlbWFpbiBpZiBjZGsgZGVzdHJveSwgQ2hhbmdlIHN0YXRlTWFjaGluZU5hbWUgZm9yIG5leHQgZGVwbG95IHRvIGF2b2lkIHN0YWNrcm9sbGJhY2sgXFxcblx0ICogREVTVFJPWSA9IGxvZyBncm91cCB3aWxsIGRlbGV0ZSBvbmNlIGNkayBkZXN0cm95XG5cdCAqXG5cdCAqIEByZWFkb25seSBsb2dHcm91cFxuXHQgKlxuXHQgKiBAcGFyYW0gc2NvcGUge0BsaW5rIENvbnN0cnVjdH1cblx0ICogQHBhcmFtIGlkXG5cdCAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgQ3VzdG9tQXBpTG9nR3JvdXBQcm9wc31cblx0ICovXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHNjb3BlOiBDb25zdHJ1Y3QsXG5cdFx0aWQ6IHN0cmluZyxcblx0XHRwcm9wczogQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBQcm9wcyxcblx0KSB7XG5cdFx0c3VwZXIoc2NvcGUsIGlkKTtcblxuXHRcdGNvbnN0IHpvZENoZWNrT3V0cHV0ID0gdXRpbHMudmVyaWZ5Q3VzdG9tU2NoZW1hPFxuXHRcdFx0dHlwZW9mIEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwU2NoZW1hLFxuXHRcdFx0Q3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBQcm9wc1xuXHRcdD4oQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBTY2hlbWEsIHByb3BzKTtcblx0XHRpZiAoIXpvZENoZWNrT3V0cHV0LnN1Y2Nlc3MpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeSh6b2RDaGVja091dHB1dC5tZXNzYWdlKSk7XG5cdFx0fVxuXG5cdFx0bGV0IGN1c3RvbUxvZ1JldGVudGlvbiA9IFJldGVudGlvbkRheXMuT05FX01PTlRIO1xuXHRcdGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gQXdzRW52aXJvbm1lbnQuUFJPRFVDVElPTikge1xuXHRcdFx0Y3VzdG9tTG9nUmV0ZW50aW9uID0gUmV0ZW50aW9uRGF5cy5USFJFRV9NT05USFM7XG5cdFx0fVxuXG5cdFx0Y29uc3QgbG9nR3JvdXBOYW1lID0gYC9hd3MvdmVuZGVkbG9ncy9zdGF0ZXMvJHtwcm9wcy5zdGF0ZU1hY2hpbmVOYW1lfWA7XG5cblx0XHR0aGlzLmxvZ0dyb3VwID0gbmV3IExvZ0dyb3VwKHRoaXMsIFwiTG9nR3JvdXBcIiwge1xuXHRcdFx0bG9nR3JvdXBOYW1lLFxuXHRcdFx0cmV0ZW50aW9uOiBjdXN0b21Mb2dSZXRlbnRpb24sXG5cdFx0XHRyZW1vdmFsUG9saWN5OiBwcm9wcy5yZW1vdmFsUG9saWN5ID8/IFJlbW92YWxQb2xpY3kuUkVUQUlOLFxuXHRcdH0pO1xuXG5cdFx0bmV3IEN1c3RvbVJlc291cmNlVGFnQ29uc3RydWN0KHRoaXMsIFwiVGFnZ2luZ1wiLCB7XG5cdFx0XHRjb25zdHJ1Y3Q6IHRoaXMubG9nR3JvdXAsXG5cdFx0XHRhd3NFbnZpcm9ubWVudDogcHJvcHMuYXdzRW52aXJvbm1lbnQsXG5cdFx0XHRyZXNvdXJjZU93bmVyOiBwcm9wcy5yZXNvdXJjZU93bmVyLFxuXHRcdFx0cmVzb3VyY2VOYW1lOiBsb2dHcm91cE5hbWUsXG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==