"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomStateMachineLogGroupConstruct = exports.CustomStateMachineLogGroupSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const constructs_1 = require("constructs");
const dotenv = require("dotenv");
const zod_1 = require("zod");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
dotenv.config();
const utils = new utils_1.PulsifiUtils();
/**
 * CustomStateMachineLogGroupSchema
 *
 * Properties for a customised LogGroup \
 * removalPolicy with default RemovalPolicy.RETAIN
 *
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 * @param stateMachineName
 * @param removalPolicy {@link RemovalPolicy}
 */
exports.CustomStateMachineLogGroupSchema = resource_tag_1.CustomResourceTagSchema.extend({
    stateMachineName: zod_1.z.string().min(1).max(489),
    removalPolicy: zod_1.z.optional(zod_1.z.nativeEnum(aws_cdk_lib_1.RemovalPolicy)),
}).omit({ resourceName: true });
class CustomStateMachineLogGroupConstruct extends constructs_1.Construct {
    /**
     * CustomStateMachineLogGroupConstruct \
     *
     * CAUTION!!! \
     * Please choose the Log Group removalPolicy wisely. \
     * RETAIN = log group will remain if cdk destroy, Change stateMachineName for next deploy to avoid stackrollback \
     * DESTROY = log group will delete once cdk destroy
     *
     * @readonly logGroup
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomApiLogGroupProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomStateMachineLogGroupSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        let customLogRetention = aws_logs_1.RetentionDays.ONE_MONTH;
        if (process.env.NODE_ENV === utils_1.AwsEnvironment.PRODUCTION) {
            customLogRetention = aws_logs_1.RetentionDays.THREE_MONTHS;
        }
        const logGroupName = `/aws/vendedlogs/states/${props.stateMachineName}`;
        this.logGroup = new aws_logs_1.LogGroup(this, "LogGroup", {
            logGroupName,
            retention: customLogRetention,
            removalPolicy: props.removalPolicy ?? aws_cdk_lib_1.RemovalPolicy.RETAIN,
        });
        aws_cdk_lib_1.Tags.of(this).add("Name", logGroupName);
        aws_cdk_lib_1.Tags.of(this).add("Owner", props.resourceOwner);
        aws_cdk_lib_1.Tags.of(this).add("Environment", props.awsEnvironment);
    }
}
exports.CustomStateMachineLogGroupConstruct = CustomStateMachineLogGroupConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtbWFjaGluZS1sb2ctZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvc3RhdGUtbWFjaGluZS1sb2ctZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQWtEO0FBQ2xELG1EQUErRDtBQUMvRCwyQ0FBdUM7QUFDdkMsaUNBQWlDO0FBQ2pDLDZCQUF3QjtBQUN4QixpREFBeUQ7QUFDekQsbUNBQXVEO0FBRXZELE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVoQixNQUFNLEtBQUssR0FBRyxJQUFJLG9CQUFZLEVBQUUsQ0FBQztBQUVqQzs7Ozs7Ozs7OztHQVVHO0FBQ1UsUUFBQSxnQ0FBZ0MsR0FBRyxzQ0FBdUIsQ0FBQyxNQUFNLENBQUM7SUFDOUUsZ0JBQWdCLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0lBQzVDLGFBQWEsRUFBRSxPQUFDLENBQUMsUUFBUSxDQUFDLE9BQUMsQ0FBQyxVQUFVLENBQUMsMkJBQWEsQ0FBQyxDQUFDO0NBQ3RELENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQWdCaEMsTUFBYSxtQ0FBb0MsU0FBUSxzQkFBUztJQUdqRTs7Ozs7Ozs7Ozs7OztPQWFHO0lBQ0gsWUFDQyxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBc0M7UUFFdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBRzdDLHdDQUFnQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFFRCxJQUFJLGtCQUFrQixHQUFHLHdCQUFhLENBQUMsU0FBUyxDQUFDO1FBQ2pELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssc0JBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN4RCxrQkFBa0IsR0FBRyx3QkFBYSxDQUFDLFlBQVksQ0FBQztRQUNqRCxDQUFDO1FBRUQsTUFBTSxZQUFZLEdBQUcsMEJBQTBCLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXhFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDOUMsWUFBWTtZQUNaLFNBQVMsRUFBRSxrQkFBa0I7WUFDN0IsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLElBQUksMkJBQWEsQ0FBQyxNQUFNO1NBQzFELENBQUMsQ0FBQztRQUVILGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDeEMsa0JBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEQsa0JBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNEO0FBakRELGtGQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbW92YWxQb2xpY3ksIFRhZ3MgfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IExvZ0dyb3VwLCBSZXRlbnRpb25EYXlzIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1sb2dzXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0ICogYXMgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYSB9IGZyb20gXCIuL3Jlc291cmNlLXRhZ1wiO1xuaW1wb3J0IHsgQXdzRW52aXJvbm1lbnQsIFB1bHNpZmlVdGlscyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmRvdGVudi5jb25maWcoKTtcblxuY29uc3QgdXRpbHMgPSBuZXcgUHVsc2lmaVV0aWxzKCk7XG5cbi8qKlxuICogQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBTY2hlbWFcbiAqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIGN1c3RvbWlzZWQgTG9nR3JvdXAgXFxcbiAqIHJlbW92YWxQb2xpY3kgd2l0aCBkZWZhdWx0IFJlbW92YWxQb2xpY3kuUkVUQUlOXG4gKlxuICogQHBhcmFtIGF3c0Vudmlyb25tZW50IHtAbGluayBBd3NFbnZpcm9ubWVudH1cbiAqIEBwYXJhbSByZXNvdXJjZU93bmVyIHtAbGluayBQdWxzaWZpVGVhbX1cbiAqIEBwYXJhbSBzdGF0ZU1hY2hpbmVOYW1lXG4gKiBAcGFyYW0gcmVtb3ZhbFBvbGljeSB7QGxpbmsgUmVtb3ZhbFBvbGljeX1cbiAqL1xuZXhwb3J0IGNvbnN0IEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwU2NoZW1hID0gQ3VzdG9tUmVzb3VyY2VUYWdTY2hlbWEuZXh0ZW5kKHtcblx0c3RhdGVNYWNoaW5lTmFtZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDQ4OSksXG5cdHJlbW92YWxQb2xpY3k6IHoub3B0aW9uYWwoei5uYXRpdmVFbnVtKFJlbW92YWxQb2xpY3kpKSxcbn0pLm9taXQoeyByZXNvdXJjZU5hbWU6IHRydWUgfSk7XG5cbi8qKlxuICogQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBQcm9wc1xuICpcbiAqIFByb3BlcnRpZXMgZm9yIGEgY3VzdG9taXNlZCBMb2dHcm91cFxuICpcbiAqIEBwYXJhbSBhd3NFbnZpcm9ubWVudCB7QGxpbmsgQXdzRW52aXJvbm1lbnR9XG4gKiBAcGFyYW0gcmVzb3VyY2VPd25lciB7QGxpbmsgUHVsc2lmaVRlYW19XG4gKiBAcGFyYW0gc3RhdGVNYWNoaW5lTmFtZVxuICogQHBhcmFtIHJlbW92YWxQb2xpY3kge0BsaW5rIFJlbW92YWxQb2xpY3l9XG4gKi9cbmV4cG9ydCB0eXBlIEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwUHJvcHMgPSB6LmluZmVyPFxuXHR0eXBlb2YgQ3VzdG9tU3RhdGVNYWNoaW5lTG9nR3JvdXBTY2hlbWFcbj47XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21TdGF0ZU1hY2hpbmVMb2dHcm91cENvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG5cdHB1YmxpYyByZWFkb25seSBsb2dHcm91cDogTG9nR3JvdXA7XG5cblx0LyoqXG5cdCAqIEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwQ29uc3RydWN0IFxcXG5cdCAqXG5cdCAqIENBVVRJT04hISEgXFxcblx0ICogUGxlYXNlIGNob29zZSB0aGUgTG9nIEdyb3VwIHJlbW92YWxQb2xpY3kgd2lzZWx5LiBcXFxuXHQgKiBSRVRBSU4gPSBsb2cgZ3JvdXAgd2lsbCByZW1haW4gaWYgY2RrIGRlc3Ryb3ksIENoYW5nZSBzdGF0ZU1hY2hpbmVOYW1lIGZvciBuZXh0IGRlcGxveSB0byBhdm9pZCBzdGFja3JvbGxiYWNrIFxcXG5cdCAqIERFU1RST1kgPSBsb2cgZ3JvdXAgd2lsbCBkZWxldGUgb25jZSBjZGsgZGVzdHJveVxuXHQgKlxuXHQgKiBAcmVhZG9ubHkgbG9nR3JvdXBcblx0ICpcblx0ICogQHBhcmFtIHNjb3BlIHtAbGluayBDb25zdHJ1Y3R9XG5cdCAqIEBwYXJhbSBpZFxuXHQgKiBAcGFyYW0gcHJvcHMge0BsaW5rIEN1c3RvbUFwaUxvZ0dyb3VwUHJvcHN9XG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRzY29wZTogQ29uc3RydWN0LFxuXHRcdGlkOiBzdHJpbmcsXG5cdFx0cHJvcHM6IEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwUHJvcHMsXG5cdCkge1xuXHRcdHN1cGVyKHNjb3BlLCBpZCk7XG5cblx0XHRjb25zdCB6b2RDaGVja091dHB1dCA9IHV0aWxzLnZlcmlmeUN1c3RvbVNjaGVtYTxcblx0XHRcdHR5cGVvZiBDdXN0b21TdGF0ZU1hY2hpbmVMb2dHcm91cFNjaGVtYSxcblx0XHRcdEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwUHJvcHNcblx0XHQ+KEN1c3RvbVN0YXRlTWFjaGluZUxvZ0dyb3VwU2NoZW1hLCBwcm9wcyk7XG5cdFx0aWYgKCF6b2RDaGVja091dHB1dC5zdWNjZXNzKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoem9kQ2hlY2tPdXRwdXQubWVzc2FnZSkpO1xuXHRcdH1cblxuXHRcdGxldCBjdXN0b21Mb2dSZXRlbnRpb24gPSBSZXRlbnRpb25EYXlzLk9ORV9NT05USDtcblx0XHRpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IEF3c0Vudmlyb25tZW50LlBST0RVQ1RJT04pIHtcblx0XHRcdGN1c3RvbUxvZ1JldGVudGlvbiA9IFJldGVudGlvbkRheXMuVEhSRUVfTU9OVEhTO1xuXHRcdH1cblxuXHRcdGNvbnN0IGxvZ0dyb3VwTmFtZSA9IGAvYXdzL3ZlbmRlZGxvZ3Mvc3RhdGVzLyR7cHJvcHMuc3RhdGVNYWNoaW5lTmFtZX1gO1xuXG5cdFx0dGhpcy5sb2dHcm91cCA9IG5ldyBMb2dHcm91cCh0aGlzLCBcIkxvZ0dyb3VwXCIsIHtcblx0XHRcdGxvZ0dyb3VwTmFtZSxcblx0XHRcdHJldGVudGlvbjogY3VzdG9tTG9nUmV0ZW50aW9uLFxuXHRcdFx0cmVtb3ZhbFBvbGljeTogcHJvcHMucmVtb3ZhbFBvbGljeSA/PyBSZW1vdmFsUG9saWN5LlJFVEFJTixcblx0XHR9KTtcblxuXHRcdFRhZ3Mub2YodGhpcykuYWRkKFwiTmFtZVwiLCBsb2dHcm91cE5hbWUpO1xuXHRcdFRhZ3Mub2YodGhpcykuYWRkKFwiT3duZXJcIiwgcHJvcHMucmVzb3VyY2VPd25lcik7XG5cdFx0VGFncy5vZih0aGlzKS5hZGQoXCJFbnZpcm9ubWVudFwiLCBwcm9wcy5hd3NFbnZpcm9ubWVudCk7XG5cdH1cbn1cbiJdfQ==