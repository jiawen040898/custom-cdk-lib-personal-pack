"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomLambdaErrorAlarmConstruct = exports.CustomLambdaErrorAlarmSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const aws_cloudwatch_actions_1 = require("aws-cdk-lib/aws-cloudwatch-actions");
const aws_sns_1 = require("aws-cdk-lib/aws-sns");
const constructs_1 = require("constructs");
const dotenv = require("dotenv");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
dotenv.config();
const healthTopicName = "pulsifi-cw-logs-alarm-topic";
/**
 * CustomLambdaErrorAlarmSchema
 *
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 */
exports.CustomLambdaErrorAlarmSchema = resource_tag_1.CustomResourceTagSchema.omit({
    resourceName: true,
});
class CustomLambdaErrorAlarmConstruct extends constructs_1.Construct {
    /**
     * CustomLambdaErrorAlarmConstruct
     *
     * For AWS region, it will read from environment variable CDK_DEPLOY_REGION or CDK_DEFAULT_REGION.
     * For AWS account ID, it will read from environment variable CDK_DEPLOY_ACCOUNT or CDK_DEFAULT_ACCOUNT
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomLambdaErrorAlarmProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const utils = new utils_1.PulsifiUtils();
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomLambdaErrorAlarmSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        const region = process.env.CDK_DEPLOY_REGION ?? process.env.CDK_DEFAULT_REGION;
        const accountId = process.env.CDK_DEPLOY_ACCOUNT ?? process.env.CDK_DEFAULT_ACCOUNT;
        /** define a metric for lambda errors */
        const functionErrors = props.lambda.metricErrors({
            period: aws_cdk_lib_1.Duration.minutes(1),
        });
        const lambdaName = props.lambda.functionName;
        /** create an error alarm */
        const errorAlarm = new aws_cloudwatch_1.Alarm(this, "errorAlarm", {
            alarmName: `${lambdaName}-error-alarm`,
            metric: functionErrors,
            threshold: 0,
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods: 1,
            datapointsToAlarm: 1,
            treatMissingData: aws_cloudwatch_1.TreatMissingData.IGNORE,
        });
        new resource_tag_1.CustomResourceTagConstruct(this, "Tagging", {
            construct: this,
            awsEnvironment: props.awsEnvironment,
            resourceOwner: props.resourceOwner,
            resourceName: errorAlarm.alarmName,
        });
        /** adds alarm action to healthTopic */
        const healthTopic = aws_sns_1.Topic.fromTopicArn(this, "healthTopic", `arn:aws:sns:${region}:${accountId}:${healthTopicName}`);
        errorAlarm.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(healthTopic));
    }
}
exports.CustomLambdaErrorAlarmConstruct = CustomLambdaErrorAlarmConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLWVycm9yLWFsYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL2xhbWJkYS1lcnJvci1hbGFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBdUM7QUFDdkMsK0RBS29DO0FBQ3BDLCtFQUErRDtBQUUvRCxpREFBNEM7QUFDNUMsMkNBQXVDO0FBQ3ZDLGlDQUFpQztBQUVqQyxpREFHd0I7QUFDeEIsbUNBQXVDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUVoQixNQUFNLGVBQWUsR0FBRyw2QkFBNkIsQ0FBQztBQUV0RDs7Ozs7R0FLRztBQUNVLFFBQUEsNEJBQTRCLEdBQUcsc0NBQXVCLENBQUMsSUFBSSxDQUFDO0lBQ3hFLFlBQVksRUFBRSxJQUFJO0NBQ2xCLENBQUMsQ0FBQztBQWlCSCxNQUFhLCtCQUFnQyxTQUFRLHNCQUFTO0lBQzdEOzs7Ozs7Ozs7T0FTRztJQUNILFlBQ0MsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQWtDO1FBRWxDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxLQUFLLEdBQUcsSUFBSSxvQkFBWSxFQUFFLENBQUM7UUFFakMsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUc3QyxvQ0FBNEIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO1FBQ2pFLE1BQU0sU0FBUyxHQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQztRQUVuRSx3Q0FBd0M7UUFDeEMsTUFBTSxjQUFjLEdBQVcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDeEQsTUFBTSxFQUFFLHNCQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUMzQixDQUFDLENBQUM7UUFFSCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUU3Qyw0QkFBNEI7UUFDNUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxzQkFBSyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUU7WUFDaEQsU0FBUyxFQUFFLEdBQUcsVUFBVSxjQUFjO1lBQ3RDLE1BQU0sRUFBRSxjQUFjO1lBQ3RCLFNBQVMsRUFBRSxDQUFDO1lBQ1osa0JBQWtCLEVBQUUsbUNBQWtCLENBQUMsc0JBQXNCO1lBQzdELGlCQUFpQixFQUFFLENBQUM7WUFDcEIsaUJBQWlCLEVBQUUsQ0FBQztZQUNwQixnQkFBZ0IsRUFBRSxpQ0FBZ0IsQ0FBQyxNQUFNO1NBQ3pDLENBQUMsQ0FBQztRQUVILElBQUkseUNBQTBCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUMvQyxTQUFTLEVBQUUsSUFBSTtZQUNmLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxTQUFTO1NBQ2xDLENBQUMsQ0FBQztRQUVILHVDQUF1QztRQUN2QyxNQUFNLFdBQVcsR0FBRyxlQUFLLENBQUMsWUFBWSxDQUNyQyxJQUFJLEVBQ0osYUFBYSxFQUNiLGVBQWUsTUFBTSxJQUFJLFNBQVMsSUFBSSxlQUFlLEVBQUUsQ0FDdkQsQ0FBQztRQUNGLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxrQ0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNEO0FBbEVELDBFQWtFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQge1xuXHRBbGFybSxcblx0Q29tcGFyaXNvbk9wZXJhdG9yLFxuXHR0eXBlIE1ldHJpYyxcblx0VHJlYXRNaXNzaW5nRGF0YSxcbn0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgeyBTbnNBY3Rpb24gfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWNsb3Vkd2F0Y2gtYWN0aW9uc1wiO1xuaW1wb3J0IHR5cGUgeyBOb2RlanNGdW5jdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqc1wiO1xuaW1wb3J0IHsgVG9waWMgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNuc1wiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XG5pbXBvcnQgdHlwZSB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQge1xuXHRDdXN0b21SZXNvdXJjZVRhZ0NvbnN0cnVjdCxcblx0Q3VzdG9tUmVzb3VyY2VUYWdTY2hlbWEsXG59IGZyb20gXCIuL3Jlc291cmNlLXRhZ1wiO1xuaW1wb3J0IHsgUHVsc2lmaVV0aWxzIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuXG5jb25zdCBoZWFsdGhUb3BpY05hbWUgPSBcInB1bHNpZmktY3ctbG9ncy1hbGFybS10b3BpY1wiO1xuXG4vKipcbiAqIEN1c3RvbUxhbWJkYUVycm9yQWxhcm1TY2hlbWFcbiAqXG4gKiBAcGFyYW0gYXdzRW52aXJvbm1lbnQge0BsaW5rIEF3c0Vudmlyb25tZW50fVxuICogQHBhcmFtIHJlc291cmNlT3duZXIge0BsaW5rIFB1bHNpZmlUZWFtfVxuICovXG5leHBvcnQgY29uc3QgQ3VzdG9tTGFtYmRhRXJyb3JBbGFybVNjaGVtYSA9IEN1c3RvbVJlc291cmNlVGFnU2NoZW1hLm9taXQoe1xuXHRyZXNvdXJjZU5hbWU6IHRydWUsXG59KTtcblxuLyoqXG4gKiBDdXN0b21FcnJvckFsYXJtUHJvcHNcbiAqXG4gKiBFcnJvciBhbGFybSB0byBiZSB1c2VkIGJ5IHRoZSBmb2xsb3dpbmcgbGFtYmRhXG4gKlxuICogQHBhcmFtIGF3c0Vudmlyb25tZW50IHtAbGluayBBd3NFbnZpcm9ubWVudH1cbiAqIEBwYXJhbSByZXNvdXJjZU93bmVyIHtAbGluayBQdWxzaWZpVGVhbX1cbiAqIEBwYXJhbSBsYW1iZGEge0BsaW5rIE5vZGVqc0Z1bmN0aW9ufVxuICovXG5leHBvcnQgdHlwZSBDdXN0b21MYW1iZGFFcnJvckFsYXJtUHJvcHMgPSB6LmluZmVyPFxuXHR0eXBlb2YgQ3VzdG9tTGFtYmRhRXJyb3JBbGFybVNjaGVtYVxuPiAmIHtcblx0bGFtYmRhOiBOb2RlanNGdW5jdGlvbjtcbn07XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21MYW1iZGFFcnJvckFsYXJtQ29uc3RydWN0IGV4dGVuZHMgQ29uc3RydWN0IHtcblx0LyoqXG5cdCAqIEN1c3RvbUxhbWJkYUVycm9yQWxhcm1Db25zdHJ1Y3Rcblx0ICpcblx0ICogRm9yIEFXUyByZWdpb24sIGl0IHdpbGwgcmVhZCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlIENES19ERVBMT1lfUkVHSU9OIG9yIENES19ERUZBVUxUX1JFR0lPTi5cblx0ICogRm9yIEFXUyBhY2NvdW50IElELCBpdCB3aWxsIHJlYWQgZnJvbSBlbnZpcm9ubWVudCB2YXJpYWJsZSBDREtfREVQTE9ZX0FDQ09VTlQgb3IgQ0RLX0RFRkFVTFRfQUNDT1VOVFxuXHQgKlxuXHQgKiBAcGFyYW0gc2NvcGUge0BsaW5rIENvbnN0cnVjdH1cblx0ICogQHBhcmFtIGlkXG5cdCAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgQ3VzdG9tTGFtYmRhRXJyb3JBbGFybVByb3BzfVxuXHQgKi9cblx0Y29uc3RydWN0b3IoXG5cdFx0c2NvcGU6IENvbnN0cnVjdCxcblx0XHRpZDogc3RyaW5nLFxuXHRcdHByb3BzOiBDdXN0b21MYW1iZGFFcnJvckFsYXJtUHJvcHMsXG5cdCkge1xuXHRcdHN1cGVyKHNjb3BlLCBpZCk7XG5cblx0XHRjb25zdCB1dGlscyA9IG5ldyBQdWxzaWZpVXRpbHMoKTtcblxuXHRcdGNvbnN0IHpvZENoZWNrT3V0cHV0ID0gdXRpbHMudmVyaWZ5Q3VzdG9tU2NoZW1hPFxuXHRcdFx0dHlwZW9mIEN1c3RvbUxhbWJkYUVycm9yQWxhcm1TY2hlbWEsXG5cdFx0XHRDdXN0b21MYW1iZGFFcnJvckFsYXJtUHJvcHNcblx0XHQ+KEN1c3RvbUxhbWJkYUVycm9yQWxhcm1TY2hlbWEsIHByb3BzKTtcblx0XHRpZiAoIXpvZENoZWNrT3V0cHV0LnN1Y2Nlc3MpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeSh6b2RDaGVja091dHB1dC5tZXNzYWdlKSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVnaW9uID1cblx0XHRcdHByb2Nlc3MuZW52LkNES19ERVBMT1lfUkVHSU9OID8/IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTjtcblx0XHRjb25zdCBhY2NvdW50SWQgPVxuXHRcdFx0cHJvY2Vzcy5lbnYuQ0RLX0RFUExPWV9BQ0NPVU5UID8/IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQ7XG5cblx0XHQvKiogZGVmaW5lIGEgbWV0cmljIGZvciBsYW1iZGEgZXJyb3JzICovXG5cdFx0Y29uc3QgZnVuY3Rpb25FcnJvcnM6IE1ldHJpYyA9IHByb3BzLmxhbWJkYS5tZXRyaWNFcnJvcnMoe1xuXHRcdFx0cGVyaW9kOiBEdXJhdGlvbi5taW51dGVzKDEpLFxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgbGFtYmRhTmFtZSA9IHByb3BzLmxhbWJkYS5mdW5jdGlvbk5hbWU7XG5cblx0XHQvKiogY3JlYXRlIGFuIGVycm9yIGFsYXJtICovXG5cdFx0Y29uc3QgZXJyb3JBbGFybSA9IG5ldyBBbGFybSh0aGlzLCBcImVycm9yQWxhcm1cIiwge1xuXHRcdFx0YWxhcm1OYW1lOiBgJHtsYW1iZGFOYW1lfS1lcnJvci1hbGFybWAsXG5cdFx0XHRtZXRyaWM6IGZ1bmN0aW9uRXJyb3JzLFxuXHRcdFx0dGhyZXNob2xkOiAwLFxuXHRcdFx0Y29tcGFyaXNvbk9wZXJhdG9yOiBDb21wYXJpc29uT3BlcmF0b3IuR1JFQVRFUl9USEFOX1RIUkVTSE9MRCxcblx0XHRcdGV2YWx1YXRpb25QZXJpb2RzOiAxLFxuXHRcdFx0ZGF0YXBvaW50c1RvQWxhcm06IDEsXG5cdFx0XHR0cmVhdE1pc3NpbmdEYXRhOiBUcmVhdE1pc3NpbmdEYXRhLklHTk9SRSxcblx0XHR9KTtcblxuXHRcdG5ldyBDdXN0b21SZXNvdXJjZVRhZ0NvbnN0cnVjdCh0aGlzLCBcIlRhZ2dpbmdcIiwge1xuXHRcdFx0Y29uc3RydWN0OiB0aGlzLFxuXHRcdFx0YXdzRW52aXJvbm1lbnQ6IHByb3BzLmF3c0Vudmlyb25tZW50LFxuXHRcdFx0cmVzb3VyY2VPd25lcjogcHJvcHMucmVzb3VyY2VPd25lcixcblx0XHRcdHJlc291cmNlTmFtZTogZXJyb3JBbGFybS5hbGFybU5hbWUsXG5cdFx0fSk7XG5cblx0XHQvKiogYWRkcyBhbGFybSBhY3Rpb24gdG8gaGVhbHRoVG9waWMgKi9cblx0XHRjb25zdCBoZWFsdGhUb3BpYyA9IFRvcGljLmZyb21Ub3BpY0Fybihcblx0XHRcdHRoaXMsXG5cdFx0XHRcImhlYWx0aFRvcGljXCIsXG5cdFx0XHRgYXJuOmF3czpzbnM6JHtyZWdpb259OiR7YWNjb3VudElkfToke2hlYWx0aFRvcGljTmFtZX1gLFxuXHRcdCk7XG5cdFx0ZXJyb3JBbGFybS5hZGRBbGFybUFjdGlvbihuZXcgU25zQWN0aW9uKGhlYWx0aFRvcGljKSk7XG5cdH1cbn1cbiJdfQ==