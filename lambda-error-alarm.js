"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomLambdaErrorAlarmConstruct = exports.verifyCustomLambdaErrorAlarmSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const aws_cloudwatch_actions_1 = require("aws-cdk-lib/aws-cloudwatch-actions");
const aws_sns_1 = require("aws-cdk-lib/aws-sns");
const constructs_1 = require("constructs");
const dotenv = require("dotenv");
const resource_tag_1 = require("./resource-tag");
dotenv.config();
const healthTopicName = "pulsifi-cw-logs-alarm-topic";
/**
 * CustomLambdaErrorAlarmSchema
 *
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 */
const CustomLambdaErrorAlarmSchema = resource_tag_1.CustomResourceTagSchema.omit({
    resourceName: true,
});
/**
 * verifyCustomLambdaErrorAlarmSchema
 *
 * @param props {@link CustomLambdaErrorAlarmProps}
 * @returns output {@link CustomZodResponse}
 */
const verifyCustomLambdaErrorAlarmSchema = (props) => {
    const zodCheckOutput = CustomLambdaErrorAlarmSchema.safeParse(props);
    if (!zodCheckOutput.success) {
        return {
            success: zodCheckOutput.success,
            message: zodCheckOutput.error.issues,
        };
    }
    return {
        success: zodCheckOutput.success,
    };
};
exports.verifyCustomLambdaErrorAlarmSchema = verifyCustomLambdaErrorAlarmSchema;
class CustomLambdaErrorAlarmConstruct extends constructs_1.Construct {
    /**
     * CustomLambdaErrorAlarmConstruct
     *
     * For AWS region, it will read from environment variable CDK_DEPLOY_REGION or CDK_DEFAULT_REGION.
     * For AWS account ID, it will read from environment variable CDK_DEPLOY_ACCOUNT or CDK_DEFAULT_ACCOUNT
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomLambdaErrorAlarmProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = (0, exports.verifyCustomLambdaErrorAlarmSchema)(props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        const region = process.env.CDK_DEPLOY_REGION ?? process.env.CDK_DEFAULT_REGION;
        const accountId = process.env.CDK_DEPLOY_ACCOUNT ?? process.env.CDK_DEFAULT_ACCOUNT;
        /** define a metric for lambda errors */
        const functionErrors = props.lambda.metricErrors({
            period: aws_cdk_lib_1.Duration.minutes(1),
        });
        const lambdaName = props.lambda.functionName;
        /** create an error alarm */
        const errorAlarm = new aws_cloudwatch_1.Alarm(this, "errorAlarm", {
            alarmName: `${lambdaName}-error-alarm`,
            metric: functionErrors,
            threshold: 0,
            comparisonOperator: aws_cloudwatch_1.ComparisonOperator.GREATER_THAN_THRESHOLD,
            evaluationPeriods: 1,
            datapointsToAlarm: 1,
            treatMissingData: aws_cloudwatch_1.TreatMissingData.IGNORE,
        });
        new resource_tag_1.CustomResourceTagConstruct(this, "Tagging", {
            construct: this,
            awsEnvironment: props.awsEnvironment,
            resourceOwner: props.resourceOwner,
            resourceName: errorAlarm.alarmName,
        });
        /** adds alarm action to healthTopic */
        const healthTopic = aws_sns_1.Topic.fromTopicArn(this, "healthTopic", `arn:aws:sns:${region}:${accountId}:${healthTopicName}`);
        errorAlarm.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(healthTopic));
    }
}
exports.CustomLambdaErrorAlarmConstruct = CustomLambdaErrorAlarmConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLWVycm9yLWFsYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL2xhbWJkYS1lcnJvci1hbGFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBdUM7QUFDdkMsK0RBS29DO0FBQ3BDLCtFQUErRDtBQUUvRCxpREFBNEM7QUFDNUMsMkNBQXVDO0FBQ3ZDLGlDQUFpQztBQUVqQyxpREFHd0I7QUFHeEIsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLE1BQU0sZUFBZSxHQUFHLDZCQUE2QixDQUFDO0FBRXREOzs7OztHQUtHO0FBQ0gsTUFBTSw0QkFBNEIsR0FBRyxzQ0FBdUIsQ0FBQyxJQUFJLENBQUM7SUFDakUsWUFBWSxFQUFFLElBQUk7Q0FDbEIsQ0FBQyxDQUFDO0FBaUJIOzs7OztHQUtHO0FBQ0ksTUFBTSxrQ0FBa0MsR0FBRyxDQUNqRCxLQUFrQyxFQUNqQyxFQUFFO0lBQ0gsTUFBTSxjQUFjLEdBQUcsNEJBQTRCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0IsT0FBTztZQUNOLE9BQU8sRUFBRSxjQUFjLENBQUMsT0FBTztZQUMvQixPQUFPLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNO1NBQ2YsQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTztRQUNOLE9BQU8sRUFBRSxjQUFjLENBQUMsT0FBTztLQUNWLENBQUM7QUFDeEIsQ0FBQyxDQUFDO0FBZFcsUUFBQSxrQ0FBa0Msc0NBYzdDO0FBRUYsTUFBYSwrQkFBZ0MsU0FBUSxzQkFBUztJQUM3RDs7Ozs7Ozs7O09BU0c7SUFDSCxZQUNDLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUFrQztRQUVsQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sY0FBYyxHQUFHLElBQUEsMENBQWtDLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQztRQUVELE1BQU0sTUFBTSxHQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQztRQUNqRSxNQUFNLFNBQVMsR0FDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7UUFFbkUsd0NBQXdDO1FBQ3hDLE1BQU0sY0FBYyxHQUFXLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDO1lBQ3hELE1BQU0sRUFBRSxzQkFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDM0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFFN0MsNEJBQTRCO1FBQzVCLE1BQU0sVUFBVSxHQUFHLElBQUksc0JBQUssQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFO1lBQ2hELFNBQVMsRUFBRSxHQUFHLFVBQVUsY0FBYztZQUN0QyxNQUFNLEVBQUUsY0FBYztZQUN0QixTQUFTLEVBQUUsQ0FBQztZQUNaLGtCQUFrQixFQUFFLG1DQUFrQixDQUFDLHNCQUFzQjtZQUM3RCxpQkFBaUIsRUFBRSxDQUFDO1lBQ3BCLGlCQUFpQixFQUFFLENBQUM7WUFDcEIsZ0JBQWdCLEVBQUUsaUNBQWdCLENBQUMsTUFBTTtTQUN6QyxDQUFDLENBQUM7UUFFSCxJQUFJLHlDQUEwQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDL0MsU0FBUyxFQUFFLElBQUk7WUFDZixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFlBQVksRUFBRSxVQUFVLENBQUMsU0FBUztTQUNsQyxDQUFDLENBQUM7UUFFSCx1Q0FBdUM7UUFDdkMsTUFBTSxXQUFXLEdBQUcsZUFBSyxDQUFDLFlBQVksQ0FDckMsSUFBSSxFQUNKLGFBQWEsRUFDYixlQUFlLE1BQU0sSUFBSSxTQUFTLElBQUksZUFBZSxFQUFFLENBQ3ZELENBQUM7UUFDRixVQUFVLENBQUMsY0FBYyxDQUFDLElBQUksa0NBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDRDtBQTdERCwwRUE2REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHtcblx0QWxhcm0sXG5cdENvbXBhcmlzb25PcGVyYXRvcixcblx0dHlwZSBNZXRyaWMsXG5cdFRyZWF0TWlzc2luZ0RhdGEsXG59IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2xvdWR3YXRjaFwiO1xuaW1wb3J0IHsgU25zQWN0aW9uIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoLWFjdGlvbnNcIjtcbmltcG9ydCB0eXBlIHsgTm9kZWpzRnVuY3Rpb24gfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ub2RlanNcIjtcbmltcG9ydCB7IFRvcGljIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1zbnNcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IHR5cGUgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHtcblx0Q3VzdG9tUmVzb3VyY2VUYWdDb25zdHJ1Y3QsXG5cdEN1c3RvbVJlc291cmNlVGFnU2NoZW1hLFxufSBmcm9tIFwiLi9yZXNvdXJjZS10YWdcIjtcbmltcG9ydCB0eXBlIHsgQ3VzdG9tWm9kUmVzcG9uc2UgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5cbmNvbnN0IGhlYWx0aFRvcGljTmFtZSA9IFwicHVsc2lmaS1jdy1sb2dzLWFsYXJtLXRvcGljXCI7XG5cbi8qKlxuICogQ3VzdG9tTGFtYmRhRXJyb3JBbGFybVNjaGVtYVxuICpcbiAqIEBwYXJhbSBhd3NFbnZpcm9ubWVudCB7QGxpbmsgQXdzRW52aXJvbm1lbnR9XG4gKiBAcGFyYW0gcmVzb3VyY2VPd25lciB7QGxpbmsgUHVsc2lmaVRlYW19XG4gKi9cbmNvbnN0IEN1c3RvbUxhbWJkYUVycm9yQWxhcm1TY2hlbWEgPSBDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYS5vbWl0KHtcblx0cmVzb3VyY2VOYW1lOiB0cnVlLFxufSk7XG5cbi8qKlxuICogQ3VzdG9tRXJyb3JBbGFybVByb3BzXG4gKlxuICogRXJyb3IgYWxhcm0gdG8gYmUgdXNlZCBieSB0aGUgZm9sbG93aW5nIGxhbWJkYVxuICpcbiAqIEBwYXJhbSBhd3NFbnZpcm9ubWVudCB7QGxpbmsgQXdzRW52aXJvbm1lbnR9XG4gKiBAcGFyYW0gcmVzb3VyY2VPd25lciB7QGxpbmsgUHVsc2lmaVRlYW19XG4gKiBAcGFyYW0gbGFtYmRhIHtAbGluayBOb2RlanNGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IHR5cGUgQ3VzdG9tTGFtYmRhRXJyb3JBbGFybVByb3BzID0gei5pbmZlcjxcblx0dHlwZW9mIEN1c3RvbUxhbWJkYUVycm9yQWxhcm1TY2hlbWFcbj4gJiB7XG5cdGxhbWJkYTogTm9kZWpzRnVuY3Rpb247XG59O1xuXG4vKipcbiAqIHZlcmlmeUN1c3RvbUxhbWJkYUVycm9yQWxhcm1TY2hlbWFcbiAqXG4gKiBAcGFyYW0gcHJvcHMge0BsaW5rIEN1c3RvbUxhbWJkYUVycm9yQWxhcm1Qcm9wc31cbiAqIEByZXR1cm5zIG91dHB1dCB7QGxpbmsgQ3VzdG9tWm9kUmVzcG9uc2V9XG4gKi9cbmV4cG9ydCBjb25zdCB2ZXJpZnlDdXN0b21MYW1iZGFFcnJvckFsYXJtU2NoZW1hID0gKFxuXHRwcm9wczogQ3VzdG9tTGFtYmRhRXJyb3JBbGFybVByb3BzLFxuKSA9PiB7XG5cdGNvbnN0IHpvZENoZWNrT3V0cHV0ID0gQ3VzdG9tTGFtYmRhRXJyb3JBbGFybVNjaGVtYS5zYWZlUGFyc2UocHJvcHMpO1xuXHRpZiAoIXpvZENoZWNrT3V0cHV0LnN1Y2Nlc3MpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3VjY2Vzczogem9kQ2hlY2tPdXRwdXQuc3VjY2Vzcyxcblx0XHRcdG1lc3NhZ2U6IHpvZENoZWNrT3V0cHV0LmVycm9yLmlzc3Vlcyxcblx0XHR9IGFzIEN1c3RvbVpvZFJlc3BvbnNlO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzdWNjZXNzOiB6b2RDaGVja091dHB1dC5zdWNjZXNzLFxuXHR9IGFzIEN1c3RvbVpvZFJlc3BvbnNlO1xufTtcblxuZXhwb3J0IGNsYXNzIEN1c3RvbUxhbWJkYUVycm9yQWxhcm1Db25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuXHQvKipcblx0ICogQ3VzdG9tTGFtYmRhRXJyb3JBbGFybUNvbnN0cnVjdFxuXHQgKlxuXHQgKiBGb3IgQVdTIHJlZ2lvbiwgaXQgd2lsbCByZWFkIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGUgQ0RLX0RFUExPWV9SRUdJT04gb3IgQ0RLX0RFRkFVTFRfUkVHSU9OLlxuXHQgKiBGb3IgQVdTIGFjY291bnQgSUQsIGl0IHdpbGwgcmVhZCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlIENES19ERVBMT1lfQUNDT1VOVCBvciBDREtfREVGQVVMVF9BQ0NPVU5UXG5cdCAqXG5cdCAqIEBwYXJhbSBzY29wZSB7QGxpbmsgQ29uc3RydWN0fVxuXHQgKiBAcGFyYW0gaWRcblx0ICogQHBhcmFtIHByb3BzIHtAbGluayBDdXN0b21MYW1iZGFFcnJvckFsYXJtUHJvcHN9XG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRzY29wZTogQ29uc3RydWN0LFxuXHRcdGlkOiBzdHJpbmcsXG5cdFx0cHJvcHM6IEN1c3RvbUxhbWJkYUVycm9yQWxhcm1Qcm9wcyxcblx0KSB7XG5cdFx0c3VwZXIoc2NvcGUsIGlkKTtcblxuXHRcdGNvbnN0IHpvZENoZWNrT3V0cHV0ID0gdmVyaWZ5Q3VzdG9tTGFtYmRhRXJyb3JBbGFybVNjaGVtYShwcm9wcyk7XG5cdFx0aWYgKCF6b2RDaGVja091dHB1dC5zdWNjZXNzKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoem9kQ2hlY2tPdXRwdXQubWVzc2FnZSkpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlZ2lvbiA9XG5cdFx0XHRwcm9jZXNzLmVudi5DREtfREVQTE9ZX1JFR0lPTiA/PyBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT047XG5cdFx0Y29uc3QgYWNjb3VudElkID1cblx0XHRcdHByb2Nlc3MuZW52LkNES19ERVBMT1lfQUNDT1VOVCA/PyBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5UO1xuXG5cdFx0LyoqIGRlZmluZSBhIG1ldHJpYyBmb3IgbGFtYmRhIGVycm9ycyAqL1xuXHRcdGNvbnN0IGZ1bmN0aW9uRXJyb3JzOiBNZXRyaWMgPSBwcm9wcy5sYW1iZGEubWV0cmljRXJyb3JzKHtcblx0XHRcdHBlcmlvZDogRHVyYXRpb24ubWludXRlcygxKSxcblx0XHR9KTtcblxuXHRcdGNvbnN0IGxhbWJkYU5hbWUgPSBwcm9wcy5sYW1iZGEuZnVuY3Rpb25OYW1lO1xuXG5cdFx0LyoqIGNyZWF0ZSBhbiBlcnJvciBhbGFybSAqL1xuXHRcdGNvbnN0IGVycm9yQWxhcm0gPSBuZXcgQWxhcm0odGhpcywgXCJlcnJvckFsYXJtXCIsIHtcblx0XHRcdGFsYXJtTmFtZTogYCR7bGFtYmRhTmFtZX0tZXJyb3ItYWxhcm1gLFxuXHRcdFx0bWV0cmljOiBmdW5jdGlvbkVycm9ycyxcblx0XHRcdHRocmVzaG9sZDogMCxcblx0XHRcdGNvbXBhcmlzb25PcGVyYXRvcjogQ29tcGFyaXNvbk9wZXJhdG9yLkdSRUFURVJfVEhBTl9USFJFU0hPTEQsXG5cdFx0XHRldmFsdWF0aW9uUGVyaW9kczogMSxcblx0XHRcdGRhdGFwb2ludHNUb0FsYXJtOiAxLFxuXHRcdFx0dHJlYXRNaXNzaW5nRGF0YTogVHJlYXRNaXNzaW5nRGF0YS5JR05PUkUsXG5cdFx0fSk7XG5cblx0XHRuZXcgQ3VzdG9tUmVzb3VyY2VUYWdDb25zdHJ1Y3QodGhpcywgXCJUYWdnaW5nXCIsIHtcblx0XHRcdGNvbnN0cnVjdDogdGhpcyxcblx0XHRcdGF3c0Vudmlyb25tZW50OiBwcm9wcy5hd3NFbnZpcm9ubWVudCxcblx0XHRcdHJlc291cmNlT3duZXI6IHByb3BzLnJlc291cmNlT3duZXIsXG5cdFx0XHRyZXNvdXJjZU5hbWU6IGVycm9yQWxhcm0uYWxhcm1OYW1lLFxuXHRcdH0pO1xuXG5cdFx0LyoqIGFkZHMgYWxhcm0gYWN0aW9uIHRvIGhlYWx0aFRvcGljICovXG5cdFx0Y29uc3QgaGVhbHRoVG9waWMgPSBUb3BpYy5mcm9tVG9waWNBcm4oXG5cdFx0XHR0aGlzLFxuXHRcdFx0XCJoZWFsdGhUb3BpY1wiLFxuXHRcdFx0YGFybjphd3M6c25zOiR7cmVnaW9ufToke2FjY291bnRJZH06JHtoZWFsdGhUb3BpY05hbWV9YCxcblx0XHQpO1xuXHRcdGVycm9yQWxhcm0uYWRkQWxhcm1BY3Rpb24obmV3IFNuc0FjdGlvbihoZWFsdGhUb3BpYykpO1xuXHR9XG59XG4iXX0=