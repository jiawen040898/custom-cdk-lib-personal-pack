"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomIamPolicyConstruct = exports.verifyStatementCount = exports.verifyRoleCount = exports.generateIamPolicyName = exports.CustomIamPolicySchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const constructs_1 = require("constructs");
const lodash_1 = require("lodash");
const zod_1 = require("zod");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
/**
 * CustomIamPolicySchema
 *
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 * @prop resourceName
 */
exports.CustomIamPolicySchema = resource_tag_1.CustomResourceTagSchema.omit({
    resourceName: true,
}).extend({
    resourceName: zod_1.z
        .string()
        .min(1)
        .max(118)
        .refine((value) => {
        if (value.length > 0) {
            return (0, lodash_1.kebabCase)(value);
        }
        return "";
    }, utils_1.PulsifiCustomCdkError.NON_KEBAB_CASE),
});
/**
 * generateIamPolicyName
 *
 * @param props {@link CustomIamPolicyProps}
 * @returns output: (example: demo-api-policy)
 */
const generateIamPolicyName = (props) => {
    const formattedKebabCaseName = (0, lodash_1.kebabCase)(props.resourceName);
    return `${formattedKebabCaseName}-policy`;
};
exports.generateIamPolicyName = generateIamPolicyName;
/**
 * verifyRoleCount
 *
 * Checks role field is not empty
 *
 * @param props {@link CustomIamPolicyProps}
 */
const verifyRoleCount = (props) => {
    if (props?.roles && props.roles.length < 1) {
        throw new Error(utils_1.PulsifiCustomCdkError.IAM_POLICY_INVALID_ROLES);
    }
};
exports.verifyRoleCount = verifyRoleCount;
/**
 * verifyStatementCount
 *
 * Checks policy field is not empty
 *
 * @param props {@link CustomIamPolicyProps}
 */
const verifyStatementCount = (props) => {
    if (props?.statements && props.statements.length < 1) {
        throw new Error(utils_1.PulsifiCustomCdkError.IAM_POLICY_INVALID_STATEMENTS);
    }
};
exports.verifyStatementCount = verifyStatementCount;
class CustomIamPolicyConstruct extends constructs_1.Construct {
    /**
     * CustomIamPolicyConstruct
     *
     * Generates a standard IAM policy, please create separately if you have a custom usecase.
     *
     * Aws region abbreviation will be read from AWS account's "/configs/AWS_REGION_ABBR"
     * parameter store
     *
     * @readonly iamPolicy
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomIamPolicyProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const utils = new utils_1.PulsifiUtils();
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomIamPolicySchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        (0, exports.verifyRoleCount)(props);
        (0, exports.verifyStatementCount)(props);
        const awsRegionAbbr = aws_ssm_1.StringParameter.valueForStringParameter(this, "/configs/AWS_REGION_ABBR");
        const managedPolicyName = `${(0, exports.generateIamPolicyName)(props)}-${awsRegionAbbr}`;
        this.iamPolicy = new aws_iam_1.ManagedPolicy(this, "CustomIamPolicy", {
            managedPolicyName,
            statements: props.statements,
            roles: props.roles,
        });
        aws_cdk_lib_1.Tags.of(this).add("Name", managedPolicyName);
        aws_cdk_lib_1.Tags.of(this).add("Owner", props.resourceOwner);
        aws_cdk_lib_1.Tags.of(this).add("Environment", props.awsEnvironment);
    }
}
exports.CustomIamPolicyConstruct = CustomIamPolicyConstruct;
//# sourceMappingURL=data:application/json;base64,