"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomLambdaLogGroupConstruct = exports.CustomLambdaLogGroupSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const constructs_1 = require("constructs");
const dotenv = require("dotenv");
const zod_1 = require("zod");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
dotenv.config();
const utils = new utils_1.PulsifiUtils();
/**
 * CustomLambdaLogGroupSchema
 *
 * Properties for a customised LogGroup
 *
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 * @param lambdaName
 * @param removalPolicy {@link RemovalPolicy}
 */
exports.CustomLambdaLogGroupSchema = resource_tag_1.CustomResourceTagSchema.extend({
    lambdaName: zod_1.z.string().min(1).max(500),
    removalPolicy: zod_1.z.optional(zod_1.z.nativeEnum(aws_cdk_lib_1.RemovalPolicy)),
}).omit({ resourceName: true });
class CustomLambdaLogGroupConstruct extends constructs_1.Construct {
    /**
     * CustomLambdaLogGroupConstruct \
     *
     * CAUTION!!! \
     * Please choose the Log Group removalPolicy wisely. \
     * RETAIN = log group will remain if cdk destroy, Change lambdaName for next deploy to avoid stackrollback \
     * DESTROY = log group will delete once cdk destroy
     *
     * @readonly logGroup
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomLambdaLogGroupProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomLambdaLogGroupSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        let customLogRetention = aws_logs_1.RetentionDays.ONE_MONTH;
        if (process.env.NODE_ENV === utils_1.AwsEnvironment.PRODUCTION) {
            customLogRetention = aws_logs_1.RetentionDays.THREE_MONTHS;
        }
        const logGroupName = `/aws/lambda/${props.lambdaName}`;
        this.logGroup = new aws_logs_1.LogGroup(this, "LogGroup", {
            logGroupName,
            retention: customLogRetention,
            removalPolicy: props.removalPolicy ?? aws_cdk_lib_1.RemovalPolicy.RETAIN,
        });
        new resource_tag_1.CustomResourceTagConstruct(this, "Tagging", {
            construct: this.logGroup,
            awsEnvironment: props.awsEnvironment,
            resourceOwner: props.resourceOwner,
            resourceName: logGroupName,
        });
    }
}
exports.CustomLambdaLogGroupConstruct = CustomLambdaLogGroupConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLWxvZy1ncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9sYW1iZGEtbG9nLWdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUE0QztBQUM1QyxtREFBK0Q7QUFDL0QsMkNBQXVDO0FBQ3ZDLGlDQUFpQztBQUNqQyw2QkFBd0I7QUFDeEIsaURBR3dCO0FBQ3hCLG1DQUF1RDtBQUV2RCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxvQkFBWSxFQUFFLENBQUM7QUFFakM7Ozs7Ozs7OztHQVNHO0FBQ1UsUUFBQSwwQkFBMEIsR0FBRyxzQ0FBdUIsQ0FBQyxNQUFNLENBQUM7SUFDeEUsVUFBVSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUN0QyxhQUFhLEVBQUUsT0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFDLENBQUMsVUFBVSxDQUFDLDJCQUFhLENBQUMsQ0FBQztDQUN0RCxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFnQmhDLE1BQWEsNkJBQThCLFNBQVEsc0JBQVM7SUFHM0Q7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNILFlBQ0MsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQWdDO1FBRWhDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUc3QyxrQ0FBMEIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRUQsSUFBSSxrQkFBa0IsR0FBRyx3QkFBYSxDQUFDLFNBQVMsQ0FBQztRQUNqRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLHNCQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDeEQsa0JBQWtCLEdBQUcsd0JBQWEsQ0FBQyxZQUFZLENBQUM7UUFDakQsQ0FBQztRQUVELE1BQU0sWUFBWSxHQUFHLGVBQWUsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRXZELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDOUMsWUFBWTtZQUNaLFNBQVMsRUFBRSxrQkFBa0I7WUFDN0IsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLElBQUksMkJBQWEsQ0FBQyxNQUFNO1NBQzFELENBQUMsQ0FBQztRQUVILElBQUkseUNBQTBCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUMvQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDeEIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxZQUFZLEVBQUUsWUFBWTtTQUMxQixDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Q7QUFwREQsc0VBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVtb3ZhbFBvbGljeSB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgTG9nR3JvdXAsIFJldGVudGlvbkRheXMgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWxvZ3NcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbmltcG9ydCB7XG5cdEN1c3RvbVJlc291cmNlVGFnQ29uc3RydWN0LFxuXHRDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYSxcbn0gZnJvbSBcIi4vcmVzb3VyY2UtdGFnXCI7XG5pbXBvcnQgeyBBd3NFbnZpcm9ubWVudCwgUHVsc2lmaVV0aWxzIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuXG5jb25zdCB1dGlscyA9IG5ldyBQdWxzaWZpVXRpbHMoKTtcblxuLyoqXG4gKiBDdXN0b21MYW1iZGFMb2dHcm91cFNjaGVtYVxuICpcbiAqIFByb3BlcnRpZXMgZm9yIGEgY3VzdG9taXNlZCBMb2dHcm91cFxuICpcbiAqIEBwYXJhbSBhd3NFbnZpcm9ubWVudCB7QGxpbmsgQXdzRW52aXJvbm1lbnR9XG4gKiBAcGFyYW0gcmVzb3VyY2VPd25lciB7QGxpbmsgUHVsc2lmaVRlYW19XG4gKiBAcGFyYW0gbGFtYmRhTmFtZVxuICogQHBhcmFtIHJlbW92YWxQb2xpY3kge0BsaW5rIFJlbW92YWxQb2xpY3l9XG4gKi9cbmV4cG9ydCBjb25zdCBDdXN0b21MYW1iZGFMb2dHcm91cFNjaGVtYSA9IEN1c3RvbVJlc291cmNlVGFnU2NoZW1hLmV4dGVuZCh7XG5cdGxhbWJkYU5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCg1MDApLFxuXHRyZW1vdmFsUG9saWN5OiB6Lm9wdGlvbmFsKHoubmF0aXZlRW51bShSZW1vdmFsUG9saWN5KSksXG59KS5vbWl0KHsgcmVzb3VyY2VOYW1lOiB0cnVlIH0pO1xuXG4vKipcbiAqIEN1c3RvbUxhbWJkYUxvZ0dyb3VwUHJvcHNcbiAqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIGN1c3RvbWlzZWQgTG9nR3JvdXBcbiAqXG4gKiBAcGFyYW0gYXdzRW52aXJvbm1lbnQge0BsaW5rIEF3c0Vudmlyb25tZW50fVxuICogQHBhcmFtIHJlc291cmNlT3duZXIge0BsaW5rIFB1bHNpZmlUZWFtfVxuICogQHBhcmFtIGxhbWJkYU5hbWVcbiAqIEBwYXJhbSByZW1vdmFsUG9saWN5IHtAbGluayBSZW1vdmFsUG9saWN5fVxuICovXG5leHBvcnQgdHlwZSBDdXN0b21MYW1iZGFMb2dHcm91cFByb3BzID0gei5pbmZlcjxcblx0dHlwZW9mIEN1c3RvbUxhbWJkYUxvZ0dyb3VwU2NoZW1hXG4+O1xuXG5leHBvcnQgY2xhc3MgQ3VzdG9tTGFtYmRhTG9nR3JvdXBDb25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuXHRwdWJsaWMgcmVhZG9ubHkgbG9nR3JvdXA6IExvZ0dyb3VwO1xuXG5cdC8qKlxuXHQgKiBDdXN0b21MYW1iZGFMb2dHcm91cENvbnN0cnVjdCBcXFxuXHQgKlxuXHQgKiBDQVVUSU9OISEhIFxcXG5cdCAqIFBsZWFzZSBjaG9vc2UgdGhlIExvZyBHcm91cCByZW1vdmFsUG9saWN5IHdpc2VseS4gXFxcblx0ICogUkVUQUlOID0gbG9nIGdyb3VwIHdpbGwgcmVtYWluIGlmIGNkayBkZXN0cm95LCBDaGFuZ2UgbGFtYmRhTmFtZSBmb3IgbmV4dCBkZXBsb3kgdG8gYXZvaWQgc3RhY2tyb2xsYmFjayBcXFxuXHQgKiBERVNUUk9ZID0gbG9nIGdyb3VwIHdpbGwgZGVsZXRlIG9uY2UgY2RrIGRlc3Ryb3lcblx0ICpcblx0ICogQHJlYWRvbmx5IGxvZ0dyb3VwXG5cdCAqXG5cdCAqIEBwYXJhbSBzY29wZSB7QGxpbmsgQ29uc3RydWN0fVxuXHQgKiBAcGFyYW0gaWRcblx0ICogQHBhcmFtIHByb3BzIHtAbGluayBDdXN0b21MYW1iZGFMb2dHcm91cFByb3BzfVxuXHQgKi9cblx0Y29uc3RydWN0b3IoXG5cdFx0c2NvcGU6IENvbnN0cnVjdCxcblx0XHRpZDogc3RyaW5nLFxuXHRcdHByb3BzOiBDdXN0b21MYW1iZGFMb2dHcm91cFByb3BzLFxuXHQpIHtcblx0XHRzdXBlcihzY29wZSwgaWQpO1xuXG5cdFx0Y29uc3Qgem9kQ2hlY2tPdXRwdXQgPSB1dGlscy52ZXJpZnlDdXN0b21TY2hlbWE8XG5cdFx0XHR0eXBlb2YgQ3VzdG9tTGFtYmRhTG9nR3JvdXBTY2hlbWEsXG5cdFx0XHRDdXN0b21MYW1iZGFMb2dHcm91cFByb3BzXG5cdFx0PihDdXN0b21MYW1iZGFMb2dHcm91cFNjaGVtYSwgcHJvcHMpO1xuXHRcdGlmICghem9kQ2hlY2tPdXRwdXQuc3VjY2Vzcykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHpvZENoZWNrT3V0cHV0Lm1lc3NhZ2UpKTtcblx0XHR9XG5cblx0XHRsZXQgY3VzdG9tTG9nUmV0ZW50aW9uID0gUmV0ZW50aW9uRGF5cy5PTkVfTU9OVEg7XG5cdFx0aWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBBd3NFbnZpcm9ubWVudC5QUk9EVUNUSU9OKSB7XG5cdFx0XHRjdXN0b21Mb2dSZXRlbnRpb24gPSBSZXRlbnRpb25EYXlzLlRIUkVFX01PTlRIUztcblx0XHR9XG5cblx0XHRjb25zdCBsb2dHcm91cE5hbWUgPSBgL2F3cy9sYW1iZGEvJHtwcm9wcy5sYW1iZGFOYW1lfWA7XG5cblx0XHR0aGlzLmxvZ0dyb3VwID0gbmV3IExvZ0dyb3VwKHRoaXMsIFwiTG9nR3JvdXBcIiwge1xuXHRcdFx0bG9nR3JvdXBOYW1lLFxuXHRcdFx0cmV0ZW50aW9uOiBjdXN0b21Mb2dSZXRlbnRpb24sXG5cdFx0XHRyZW1vdmFsUG9saWN5OiBwcm9wcy5yZW1vdmFsUG9saWN5ID8/IFJlbW92YWxQb2xpY3kuUkVUQUlOLFxuXHRcdH0pO1xuXG5cdFx0bmV3IEN1c3RvbVJlc291cmNlVGFnQ29uc3RydWN0KHRoaXMsIFwiVGFnZ2luZ1wiLCB7XG5cdFx0XHRjb25zdHJ1Y3Q6IHRoaXMubG9nR3JvdXAsXG5cdFx0XHRhd3NFbnZpcm9ubWVudDogcHJvcHMuYXdzRW52aXJvbm1lbnQsXG5cdFx0XHRyZXNvdXJjZU93bmVyOiBwcm9wcy5yZXNvdXJjZU93bmVyLFxuXHRcdFx0cmVzb3VyY2VOYW1lOiBsb2dHcm91cE5hbWUsXG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==