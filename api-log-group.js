"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomApiLogGroupConstruct = exports.CustomApiLogGroupSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const constructs_1 = require("constructs");
const dotenv = require("dotenv");
const zod_1 = require("zod");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
dotenv.config();
const utils = new utils_1.PulsifiUtils();
/**
 * CustomApiLogGroupSchema
 *
 * Schema for a customised LogGroup \
 * removalPolicy with default RemovalPolicy.RETAIN
 *
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 * @param apiName
 * @param removalPolicy {@link RemovalPolicy}
 */
exports.CustomApiLogGroupSchema = resource_tag_1.CustomResourceTagSchema.extend({
    apiName: zod_1.z.string().min(1).max(499),
    removalPolicy: zod_1.z.optional(zod_1.z.nativeEnum(aws_cdk_lib_1.RemovalPolicy)),
}).omit({ resourceName: true });
class CustomApiLogGroupConstruct extends constructs_1.Construct {
    /**
     * CustomApiLogGroupConstruct \
     *
     * CAUTION!!! \
     * Please choose the Log Group removalPolicy wisely. \
     * RETAIN = log group will remain if cdk destroy, Change apiName for next deploy to avoid stackrollback \
     * DESTROY = log group will delete once cdk destroy
     *
     * @readonly logGroup
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomApiLogGroupProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomApiLogGroupSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        let customLogRetention = aws_logs_1.RetentionDays.ONE_MONTH;
        if (process.env.NODE_ENV === utils_1.AwsEnvironment.PRODUCTION) {
            customLogRetention = aws_logs_1.RetentionDays.THREE_MONTHS;
        }
        const logGroupName = `/ecs/service/${props.apiName}`;
        this.logGroup = new aws_logs_1.LogGroup(this, "LogGroup", {
            logGroupName,
            retention: customLogRetention,
            removalPolicy: props.removalPolicy ?? aws_cdk_lib_1.RemovalPolicy.RETAIN,
        });
        aws_cdk_lib_1.Tags.of(this).add("Name", logGroupName);
        aws_cdk_lib_1.Tags.of(this).add("Owner", props.resourceOwner);
        aws_cdk_lib_1.Tags.of(this).add("Environment", props.awsEnvironment);
    }
}
exports.CustomApiLogGroupConstruct = CustomApiLogGroupConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWxvZy1ncm91cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9hcGktbG9nLWdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFrRDtBQUNsRCxtREFBK0Q7QUFDL0QsMkNBQXVDO0FBQ3ZDLGlDQUFpQztBQUNqQyw2QkFBd0I7QUFDeEIsaURBQXlEO0FBQ3pELG1DQUF1RDtBQUV2RCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxvQkFBWSxFQUFFLENBQUM7QUFFakM7Ozs7Ozs7Ozs7R0FVRztBQUNVLFFBQUEsdUJBQXVCLEdBQUcsc0NBQXVCLENBQUMsTUFBTSxDQUFDO0lBQ3JFLE9BQU8sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDbkMsYUFBYSxFQUFFLE9BQUMsQ0FBQyxRQUFRLENBQUMsT0FBQyxDQUFDLFVBQVUsQ0FBQywyQkFBYSxDQUFDLENBQUM7Q0FDdEQsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBY2hDLE1BQWEsMEJBQTJCLFNBQVEsc0JBQVM7SUFHeEQ7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNILFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBNkI7UUFDdEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBRzdDLCtCQUF1QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFFRCxJQUFJLGtCQUFrQixHQUFHLHdCQUFhLENBQUMsU0FBUyxDQUFDO1FBQ2pELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssc0JBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN4RCxrQkFBa0IsR0FBRyx3QkFBYSxDQUFDLFlBQVksQ0FBQztRQUNqRCxDQUFDO1FBRUQsTUFBTSxZQUFZLEdBQUcsZ0JBQWdCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVyRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksbUJBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzlDLFlBQVk7WUFDWixTQUFTLEVBQUUsa0JBQWtCO1lBQzdCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYSxJQUFJLDJCQUFhLENBQUMsTUFBTTtTQUMxRCxDQUFDLENBQUM7UUFFSCxrQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hELGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRDtBQTdDRCxnRUE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW1vdmFsUG9saWN5LCBUYWdzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBMb2dHcm91cCwgUmV0ZW50aW9uRGF5cyB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtbG9nc1wiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgQ3VzdG9tUmVzb3VyY2VUYWdTY2hlbWEgfSBmcm9tIFwiLi9yZXNvdXJjZS10YWdcIjtcbmltcG9ydCB7IEF3c0Vudmlyb25tZW50LCBQdWxzaWZpVXRpbHMgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5kb3RlbnYuY29uZmlnKCk7XG5cbmNvbnN0IHV0aWxzID0gbmV3IFB1bHNpZmlVdGlscygpO1xuXG4vKipcbiAqIEN1c3RvbUFwaUxvZ0dyb3VwU2NoZW1hXG4gKlxuICogU2NoZW1hIGZvciBhIGN1c3RvbWlzZWQgTG9nR3JvdXAgXFxcbiAqIHJlbW92YWxQb2xpY3kgd2l0aCBkZWZhdWx0IFJlbW92YWxQb2xpY3kuUkVUQUlOXG4gKlxuICogQHBhcmFtIGF3c0Vudmlyb25tZW50IHtAbGluayBBd3NFbnZpcm9ubWVudH1cbiAqIEBwYXJhbSByZXNvdXJjZU93bmVyIHtAbGluayBQdWxzaWZpVGVhbX1cbiAqIEBwYXJhbSBhcGlOYW1lXG4gKiBAcGFyYW0gcmVtb3ZhbFBvbGljeSB7QGxpbmsgUmVtb3ZhbFBvbGljeX1cbiAqL1xuZXhwb3J0IGNvbnN0IEN1c3RvbUFwaUxvZ0dyb3VwU2NoZW1hID0gQ3VzdG9tUmVzb3VyY2VUYWdTY2hlbWEuZXh0ZW5kKHtcblx0YXBpTmFtZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDQ5OSksXG5cdHJlbW92YWxQb2xpY3k6IHoub3B0aW9uYWwoei5uYXRpdmVFbnVtKFJlbW92YWxQb2xpY3kpKSxcbn0pLm9taXQoeyByZXNvdXJjZU5hbWU6IHRydWUgfSk7XG5cbi8qKlxuICogQ3VzdG9tQXBpTG9nR3JvdXBQcm9wc1xuICpcbiAqIFByb3BlcnRpZXMgZm9yIGEgY3VzdG9taXNlZCBMb2dHcm91cFxuICpcbiAqIEBwYXJhbSBhd3NFbnZpcm9ubWVudCB7QGxpbmsgQXdzRW52aXJvbm1lbnR9XG4gKiBAcGFyYW0gcmVzb3VyY2VPd25lciB7QGxpbmsgUHVsc2lmaVRlYW19XG4gKiBAcGFyYW0gYXBpTmFtZVxuICogQHBhcmFtIHJlbW92YWxQb2xpY3kge0BsaW5rIFJlbW92YWxQb2xpY3l9XG4gKi9cbmV4cG9ydCB0eXBlIEN1c3RvbUFwaUxvZ0dyb3VwUHJvcHMgPSB6LmluZmVyPHR5cGVvZiBDdXN0b21BcGlMb2dHcm91cFNjaGVtYT47XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21BcGlMb2dHcm91cENvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG5cdHB1YmxpYyByZWFkb25seSBsb2dHcm91cDogTG9nR3JvdXA7XG5cblx0LyoqXG5cdCAqIEN1c3RvbUFwaUxvZ0dyb3VwQ29uc3RydWN0IFxcXG5cdCAqXG5cdCAqIENBVVRJT04hISEgXFxcblx0ICogUGxlYXNlIGNob29zZSB0aGUgTG9nIEdyb3VwIHJlbW92YWxQb2xpY3kgd2lzZWx5LiBcXFxuXHQgKiBSRVRBSU4gPSBsb2cgZ3JvdXAgd2lsbCByZW1haW4gaWYgY2RrIGRlc3Ryb3ksIENoYW5nZSBhcGlOYW1lIGZvciBuZXh0IGRlcGxveSB0byBhdm9pZCBzdGFja3JvbGxiYWNrIFxcXG5cdCAqIERFU1RST1kgPSBsb2cgZ3JvdXAgd2lsbCBkZWxldGUgb25jZSBjZGsgZGVzdHJveVxuXHQgKlxuXHQgKiBAcmVhZG9ubHkgbG9nR3JvdXBcblx0ICpcblx0ICogQHBhcmFtIHNjb3BlIHtAbGluayBDb25zdHJ1Y3R9XG5cdCAqIEBwYXJhbSBpZFxuXHQgKiBAcGFyYW0gcHJvcHMge0BsaW5rIEN1c3RvbUFwaUxvZ0dyb3VwUHJvcHN9XG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ3VzdG9tQXBpTG9nR3JvdXBQcm9wcykge1xuXHRcdHN1cGVyKHNjb3BlLCBpZCk7XG5cblx0XHRjb25zdCB6b2RDaGVja091dHB1dCA9IHV0aWxzLnZlcmlmeUN1c3RvbVNjaGVtYTxcblx0XHRcdHR5cGVvZiBDdXN0b21BcGlMb2dHcm91cFNjaGVtYSxcblx0XHRcdEN1c3RvbUFwaUxvZ0dyb3VwUHJvcHNcblx0XHQ+KEN1c3RvbUFwaUxvZ0dyb3VwU2NoZW1hLCBwcm9wcyk7XG5cdFx0aWYgKCF6b2RDaGVja091dHB1dC5zdWNjZXNzKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoem9kQ2hlY2tPdXRwdXQubWVzc2FnZSkpO1xuXHRcdH1cblxuXHRcdGxldCBjdXN0b21Mb2dSZXRlbnRpb24gPSBSZXRlbnRpb25EYXlzLk9ORV9NT05USDtcblx0XHRpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IEF3c0Vudmlyb25tZW50LlBST0RVQ1RJT04pIHtcblx0XHRcdGN1c3RvbUxvZ1JldGVudGlvbiA9IFJldGVudGlvbkRheXMuVEhSRUVfTU9OVEhTO1xuXHRcdH1cblxuXHRcdGNvbnN0IGxvZ0dyb3VwTmFtZSA9IGAvZWNzL3NlcnZpY2UvJHtwcm9wcy5hcGlOYW1lfWA7XG5cblx0XHR0aGlzLmxvZ0dyb3VwID0gbmV3IExvZ0dyb3VwKHRoaXMsIFwiTG9nR3JvdXBcIiwge1xuXHRcdFx0bG9nR3JvdXBOYW1lLFxuXHRcdFx0cmV0ZW50aW9uOiBjdXN0b21Mb2dSZXRlbnRpb24sXG5cdFx0XHRyZW1vdmFsUG9saWN5OiBwcm9wcy5yZW1vdmFsUG9saWN5ID8/IFJlbW92YWxQb2xpY3kuUkVUQUlOLFxuXHRcdH0pO1xuXG5cdFx0VGFncy5vZih0aGlzKS5hZGQoXCJOYW1lXCIsIGxvZ0dyb3VwTmFtZSk7XG5cdFx0VGFncy5vZih0aGlzKS5hZGQoXCJPd25lclwiLCBwcm9wcy5yZXNvdXJjZU93bmVyKTtcblx0XHRUYWdzLm9mKHRoaXMpLmFkZChcIkVudmlyb25tZW50XCIsIHByb3BzLmF3c0Vudmlyb25tZW50KTtcblx0fVxufVxuIl19