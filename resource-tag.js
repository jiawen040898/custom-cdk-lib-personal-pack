"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomResourceTagConstruct = exports.CustomResourceTagSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const zod_1 = require("zod");
const utils_1 = require("./utils");
const utils = new utils_1.PulsifiUtils();
/**
 * CustomResourceTagSchema
 *
 * @param resourceName
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 */
exports.CustomResourceTagSchema = zod_1.z.object({
    resourceName: zod_1.z.string().min(1).max(256),
    awsEnvironment: zod_1.z.nativeEnum(utils_1.AwsEnvironment),
    resourceOwner: zod_1.z.nativeEnum(utils_1.PulsifiTeam),
});
class CustomResourceTagConstruct extends constructs_1.Construct {
    /**
     * CustomResourceTagConstruct
     *
     * @param scope
     * @param id
     * @param props {@link CustomResourceTagProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomResourceTagSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        aws_cdk_lib_1.Tags.of(props.construct).add("Name", props.resourceName);
        aws_cdk_lib_1.Tags.of(props.construct).add("Owner", props.resourceOwner);
        aws_cdk_lib_1.Tags.of(props.construct).add("Environment", props.awsEnvironment);
    }
}
exports.CustomResourceTagConstruct = CustomResourceTagConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtdGFnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliL3Jlc291cmNlLXRhZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBbUM7QUFDbkMsMkNBQXdEO0FBQ3hELDZCQUF3QjtBQUN4QixtQ0FBb0U7QUFFcEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxvQkFBWSxFQUFFLENBQUM7QUFFakM7Ozs7OztHQU1HO0FBQ1UsUUFBQSx1QkFBdUIsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQy9DLFlBQVksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDeEMsY0FBYyxFQUFFLE9BQUMsQ0FBQyxVQUFVLENBQUMsc0JBQWMsQ0FBQztJQUM1QyxhQUFhLEVBQUUsT0FBQyxDQUFDLFVBQVUsQ0FBQyxtQkFBVyxDQUFDO0NBQ3hDLENBQUMsQ0FBQztBQWNILE1BQWEsMEJBQTJCLFNBQVEsc0JBQVM7SUFDeEQ7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUE2QjtRQUN0RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FHN0MsK0JBQXVCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQztRQUVELGtCQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6RCxrQkFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDM0Qsa0JBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7Q0FDRDtBQXZCRCxnRUF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYWdzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QsIHR5cGUgSUNvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHsgQXdzRW52aXJvbm1lbnQsIFB1bHNpZmlUZWFtLCBQdWxzaWZpVXRpbHMgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5jb25zdCB1dGlscyA9IG5ldyBQdWxzaWZpVXRpbHMoKTtcblxuLyoqXG4gKiBDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYVxuICpcbiAqIEBwYXJhbSByZXNvdXJjZU5hbWVcbiAqIEBwYXJhbSBhd3NFbnZpcm9ubWVudCB7QGxpbmsgQXdzRW52aXJvbm1lbnR9XG4gKiBAcGFyYW0gcmVzb3VyY2VPd25lciB7QGxpbmsgUHVsc2lmaVRlYW19XG4gKi9cbmV4cG9ydCBjb25zdCBDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYSA9IHoub2JqZWN0KHtcblx0cmVzb3VyY2VOYW1lOiB6LnN0cmluZygpLm1pbigxKS5tYXgoMjU2KSxcblx0YXdzRW52aXJvbm1lbnQ6IHoubmF0aXZlRW51bShBd3NFbnZpcm9ubWVudCksXG5cdHJlc291cmNlT3duZXI6IHoubmF0aXZlRW51bShQdWxzaWZpVGVhbSksXG59KTtcblxuLyoqXG4gKiBDdXN0b21SZXNvdXJjZVRhZ1Byb3BzXG4gKlxuICogQHBhcmFtIHJlc291cmNlTmFtZVxuICogQHBhcmFtIGF3c0Vudmlyb25tZW50IHtAbGluayBBd3NFbnZpcm9ubWVudH1cbiAqIEBwYXJhbSByZXNvdXJjZU93bmVyIHtAbGluayBQdWxzaWZpVGVhbX1cbiAqIEBwYXJhbSBjb25zdHJ1Y3RcbiAqL1xuZXhwb3J0IHR5cGUgQ3VzdG9tUmVzb3VyY2VUYWdQcm9wcyA9IHouaW5mZXI8dHlwZW9mIEN1c3RvbVJlc291cmNlVGFnU2NoZW1hPiAmIHtcblx0Y29uc3RydWN0OiBJQ29uc3RydWN0O1xufTtcblxuZXhwb3J0IGNsYXNzIEN1c3RvbVJlc291cmNlVGFnQ29uc3RydWN0IGV4dGVuZHMgQ29uc3RydWN0IHtcblx0LyoqXG5cdCAqIEN1c3RvbVJlc291cmNlVGFnQ29uc3RydWN0XG5cdCAqXG5cdCAqIEBwYXJhbSBzY29wZVxuXHQgKiBAcGFyYW0gaWRcblx0ICogQHBhcmFtIHByb3BzIHtAbGluayBDdXN0b21SZXNvdXJjZVRhZ1Byb3BzfVxuXHQgKi9cblx0Y29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEN1c3RvbVJlc291cmNlVGFnUHJvcHMpIHtcblx0XHRzdXBlcihzY29wZSwgaWQpO1xuXG5cdFx0Y29uc3Qgem9kQ2hlY2tPdXRwdXQgPSB1dGlscy52ZXJpZnlDdXN0b21TY2hlbWE8XG5cdFx0XHR0eXBlb2YgQ3VzdG9tUmVzb3VyY2VUYWdTY2hlbWEsXG5cdFx0XHRDdXN0b21SZXNvdXJjZVRhZ1Byb3BzXG5cdFx0PihDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYSwgcHJvcHMpO1xuXHRcdGlmICghem9kQ2hlY2tPdXRwdXQuc3VjY2Vzcykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHpvZENoZWNrT3V0cHV0Lm1lc3NhZ2UpKTtcblx0XHR9XG5cblx0XHRUYWdzLm9mKHByb3BzLmNvbnN0cnVjdCkuYWRkKFwiTmFtZVwiLCBwcm9wcy5yZXNvdXJjZU5hbWUpO1xuXHRcdFRhZ3Mub2YocHJvcHMuY29uc3RydWN0KS5hZGQoXCJPd25lclwiLCBwcm9wcy5yZXNvdXJjZU93bmVyKTtcblx0XHRUYWdzLm9mKHByb3BzLmNvbnN0cnVjdCkuYWRkKFwiRW52aXJvbm1lbnRcIiwgcHJvcHMuYXdzRW52aXJvbm1lbnQpO1xuXHR9XG59XG4iXX0=