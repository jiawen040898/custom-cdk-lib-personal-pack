"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSecurityGroupConstruct = exports.CustomSecurityGroupSchema = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const constructs_1 = require("constructs");
const zod_1 = require("zod");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
const utils = new utils_1.PulsifiUtils();
/**
 * CustomSecurityGroupSchema
 *
 * @param resourceName
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 */
exports.CustomSecurityGroupSchema = resource_tag_1.CustomResourceTagSchema.omit({
    resourceName: true,
}).extend({
    resourceName: zod_1.z.string().min(1).max(252),
});
class CustomSecurityGroupConstruct extends constructs_1.Construct {
    /**
     * CustomSecurityGroupConstruct
     *
     * @readonly securityGroupName
     * @readonly securityGroup
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomSecurityGroupProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomSecurityGroupSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        const region = process.env.CDK_DEPLOY_REGION ?? process.env.CDK_DEFAULT_REGION;
        const vpcId = aws_ssm_1.StringParameter.valueFromLookup(this, "/configs/VPCID");
        const vpc = aws_ec2_1.Vpc.fromLookup(this, "VPC", {
            vpcId,
            region,
        });
        const securityGroupProps = {
            securityGroupName: `${props.resourceName}-sg`,
            description: `${props.resourceName}-sg`,
            vpc,
            allowAllOutbound: true,
            disableInlineRules: true,
        };
        this.securityGroupName = `${securityGroupProps.securityGroupName}`;
        this.securityGroup = new aws_ec2_1.SecurityGroup(this, "SecurityGroup", securityGroupProps);
        new resource_tag_1.CustomResourceTagConstruct(this, "Tagging", {
            construct: this,
            awsEnvironment: props.awsEnvironment,
            resourceOwner: props.resourceOwner,
            resourceName: `${securityGroupProps.securityGroupName}`,
        });
    }
}
exports.CustomSecurityGroupConstruct = CustomSecurityGroupConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHktZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvc2VjdXJpdHktZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBSTZCO0FBQzdCLGlEQUFzRDtBQUN0RCwyQ0FBdUM7QUFDdkMsNkJBQXdCO0FBQ3hCLGlEQUd3QjtBQUN4QixtQ0FBdUM7QUFFdkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxvQkFBWSxFQUFFLENBQUM7QUFFakM7Ozs7OztHQU1HO0FBQ1UsUUFBQSx5QkFBeUIsR0FBRyxzQ0FBdUIsQ0FBQyxJQUFJLENBQUM7SUFDckUsWUFBWSxFQUFFLElBQUk7Q0FDbEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNULFlBQVksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7Q0FDeEMsQ0FBQyxDQUFDO0FBYUgsTUFBYSw0QkFBNkIsU0FBUSxzQkFBUztJQUkxRDs7Ozs7Ozs7O09BU0c7SUFDSCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQStCO1FBQ3hFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUc3QyxpQ0FBeUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO1FBRWpFLE1BQU0sS0FBSyxHQUFHLHlCQUFlLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sR0FBRyxHQUFHLGFBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtZQUN2QyxLQUFLO1lBQ0wsTUFBTTtTQUNOLENBQUMsQ0FBQztRQUVILE1BQU0sa0JBQWtCLEdBQXVCO1lBQzlDLGlCQUFpQixFQUFFLEdBQUcsS0FBSyxDQUFDLFlBQVksS0FBSztZQUM3QyxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUMsWUFBWSxLQUFLO1lBQ3ZDLEdBQUc7WUFDSCxnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLGtCQUFrQixFQUFFLElBQUk7U0FDeEIsQ0FBQztRQUNGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDbkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHVCQUFhLENBQ3JDLElBQUksRUFDSixlQUFlLEVBQ2Ysa0JBQWtCLENBQ2xCLENBQUM7UUFFRixJQUFJLHlDQUEwQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDL0MsU0FBUyxFQUFFLElBQUk7WUFDZixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFlBQVksRUFBRSxHQUFHLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFO1NBQ3ZELENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRDtBQXZERCxvRUF1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRTZWN1cml0eUdyb3VwLFxuXHR0eXBlIFNlY3VyaXR5R3JvdXBQcm9wcyxcblx0VnBjLFxufSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVjMlwiO1xuaW1wb3J0IHsgU3RyaW5nUGFyYW1ldGVyIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1zc21cIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuaW1wb3J0IHtcblx0Q3VzdG9tUmVzb3VyY2VUYWdDb25zdHJ1Y3QsXG5cdEN1c3RvbVJlc291cmNlVGFnU2NoZW1hLFxufSBmcm9tIFwiLi9yZXNvdXJjZS10YWdcIjtcbmltcG9ydCB7IFB1bHNpZmlVdGlscyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IHV0aWxzID0gbmV3IFB1bHNpZmlVdGlscygpO1xuXG4vKipcbiAqIEN1c3RvbVNlY3VyaXR5R3JvdXBTY2hlbWFcbiAqXG4gKiBAcGFyYW0gcmVzb3VyY2VOYW1lXG4gKiBAcGFyYW0gYXdzRW52aXJvbm1lbnQge0BsaW5rIEF3c0Vudmlyb25tZW50fVxuICogQHBhcmFtIHJlc291cmNlT3duZXIge0BsaW5rIFB1bHNpZmlUZWFtfVxuICovXG5leHBvcnQgY29uc3QgQ3VzdG9tU2VjdXJpdHlHcm91cFNjaGVtYSA9IEN1c3RvbVJlc291cmNlVGFnU2NoZW1hLm9taXQoe1xuXHRyZXNvdXJjZU5hbWU6IHRydWUsXG59KS5leHRlbmQoe1xuXHRyZXNvdXJjZU5hbWU6IHouc3RyaW5nKCkubWluKDEpLm1heCgyNTIpLFxufSk7XG5cbi8qKlxuICogQ3VzdG9tU2VjdXJpdHlHcm91cFByb3BzXG4gKlxuICogQHBhcmFtIHJlc291cmNlTmFtZVxuICogQHBhcmFtIGF3c0Vudmlyb25tZW50IHtAbGluayBBd3NFbnZpcm9ubWVudH1cbiAqIEBwYXJhbSByZXNvdXJjZU93bmVyIHtAbGluayBQdWxzaWZpVGVhbX1cbiAqL1xuZXhwb3J0IHR5cGUgQ3VzdG9tU2VjdXJpdHlHcm91cFByb3BzID0gei5pbmZlcjxcblx0dHlwZW9mIEN1c3RvbVNlY3VyaXR5R3JvdXBTY2hlbWFcbj47XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21TZWN1cml0eUdyb3VwQ29uc3RydWN0IGV4dGVuZHMgQ29uc3RydWN0IHtcblx0cHVibGljIHJlYWRvbmx5IHNlY3VyaXR5R3JvdXBOYW1lOiBzdHJpbmc7XG5cdHB1YmxpYyByZWFkb25seSBzZWN1cml0eUdyb3VwOiBTZWN1cml0eUdyb3VwO1xuXG5cdC8qKlxuXHQgKiBDdXN0b21TZWN1cml0eUdyb3VwQ29uc3RydWN0XG5cdCAqXG5cdCAqIEByZWFkb25seSBzZWN1cml0eUdyb3VwTmFtZVxuXHQgKiBAcmVhZG9ubHkgc2VjdXJpdHlHcm91cFxuXHQgKlxuXHQgKiBAcGFyYW0gc2NvcGUge0BsaW5rIENvbnN0cnVjdH1cblx0ICogQHBhcmFtIGlkXG5cdCAqIEBwYXJhbSBwcm9wcyB7QGxpbmsgQ3VzdG9tU2VjdXJpdHlHcm91cFByb3BzfVxuXHQgKi9cblx0Y29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEN1c3RvbVNlY3VyaXR5R3JvdXBQcm9wcykge1xuXHRcdHN1cGVyKHNjb3BlLCBpZCk7XG5cblx0XHRjb25zdCB6b2RDaGVja091dHB1dCA9IHV0aWxzLnZlcmlmeUN1c3RvbVNjaGVtYTxcblx0XHRcdHR5cGVvZiBDdXN0b21TZWN1cml0eUdyb3VwU2NoZW1hLFxuXHRcdFx0Q3VzdG9tU2VjdXJpdHlHcm91cFByb3BzXG5cdFx0PihDdXN0b21TZWN1cml0eUdyb3VwU2NoZW1hLCBwcm9wcyk7XG5cdFx0aWYgKCF6b2RDaGVja091dHB1dC5zdWNjZXNzKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoem9kQ2hlY2tPdXRwdXQubWVzc2FnZSkpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlZ2lvbiA9XG5cdFx0XHRwcm9jZXNzLmVudi5DREtfREVQTE9ZX1JFR0lPTiA/PyBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT047XG5cblx0XHRjb25zdCB2cGNJZCA9IFN0cmluZ1BhcmFtZXRlci52YWx1ZUZyb21Mb29rdXAodGhpcywgXCIvY29uZmlncy9WUENJRFwiKTtcblx0XHRjb25zdCB2cGMgPSBWcGMuZnJvbUxvb2t1cCh0aGlzLCBcIlZQQ1wiLCB7XG5cdFx0XHR2cGNJZCxcblx0XHRcdHJlZ2lvbixcblx0XHR9KTtcblxuXHRcdGNvbnN0IHNlY3VyaXR5R3JvdXBQcm9wczogU2VjdXJpdHlHcm91cFByb3BzID0ge1xuXHRcdFx0c2VjdXJpdHlHcm91cE5hbWU6IGAke3Byb3BzLnJlc291cmNlTmFtZX0tc2dgLFxuXHRcdFx0ZGVzY3JpcHRpb246IGAke3Byb3BzLnJlc291cmNlTmFtZX0tc2dgLFxuXHRcdFx0dnBjLFxuXHRcdFx0YWxsb3dBbGxPdXRib3VuZDogdHJ1ZSxcblx0XHRcdGRpc2FibGVJbmxpbmVSdWxlczogdHJ1ZSxcblx0XHR9O1xuXHRcdHRoaXMuc2VjdXJpdHlHcm91cE5hbWUgPSBgJHtzZWN1cml0eUdyb3VwUHJvcHMuc2VjdXJpdHlHcm91cE5hbWV9YDtcblx0XHR0aGlzLnNlY3VyaXR5R3JvdXAgPSBuZXcgU2VjdXJpdHlHcm91cChcblx0XHRcdHRoaXMsXG5cdFx0XHRcIlNlY3VyaXR5R3JvdXBcIixcblx0XHRcdHNlY3VyaXR5R3JvdXBQcm9wcyxcblx0XHQpO1xuXG5cdFx0bmV3IEN1c3RvbVJlc291cmNlVGFnQ29uc3RydWN0KHRoaXMsIFwiVGFnZ2luZ1wiLCB7XG5cdFx0XHRjb25zdHJ1Y3Q6IHRoaXMsXG5cdFx0XHRhd3NFbnZpcm9ubWVudDogcHJvcHMuYXdzRW52aXJvbm1lbnQsXG5cdFx0XHRyZXNvdXJjZU93bmVyOiBwcm9wcy5yZXNvdXJjZU93bmVyLFxuXHRcdFx0cmVzb3VyY2VOYW1lOiBgJHtzZWN1cml0eUdyb3VwUHJvcHMuc2VjdXJpdHlHcm91cE5hbWV9YCxcblx0XHR9KTtcblx0fVxufVxuIl19