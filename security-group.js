"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSecurityGroupConstruct = exports.CustomSecurityGroupSchema = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const constructs_1 = require("constructs");
const zod_1 = require("zod");
const resource_tag_1 = require("./resource-tag");
const utils_1 = require("./utils");
const utils = new utils_1.PulsifiUtils();
/**
 * CustomSecurityGroupSchema
 *
 * @param resourceName
 * @param awsEnvironment {@link AwsEnvironment}
 * @param resourceOwner {@link PulsifiTeam}
 */
exports.CustomSecurityGroupSchema = resource_tag_1.CustomResourceTagSchema.omit({
    resourceName: true,
}).extend({
    resourceName: zod_1.z.string().min(1).max(252),
});
class CustomSecurityGroupConstruct extends constructs_1.Construct {
    /**
     * CustomSecurityGroupConstruct
     *
     * @readonly securityGroupName
     * @readonly securityGroup
     * @readonly vpc
     *
     * @param scope {@link Construct}
     * @param id
     * @param props {@link CustomSecurityGroupProps}
     */
    constructor(scope, id, props) {
        super(scope, id);
        const zodCheckOutput = utils.verifyCustomSchema(exports.CustomSecurityGroupSchema, props);
        if (!zodCheckOutput.success) {
            throw new Error(JSON.stringify(zodCheckOutput.message));
        }
        const region = process.env.CDK_DEPLOY_REGION ?? process.env.CDK_DEFAULT_REGION;
        const vpcId = aws_ssm_1.StringParameter.valueFromLookup(this, "/configs/VPCID");
        this.vpc = aws_ec2_1.Vpc.fromLookup(this, "VPC", {
            vpcId,
            region,
        });
        const securityGroupProps = {
            securityGroupName: `${props.resourceName}-sg`,
            description: `${props.resourceName}-sg`,
            vpc: this.vpc,
            allowAllOutbound: true,
            disableInlineRules: true,
        };
        this.securityGroupName = `${securityGroupProps.securityGroupName}`;
        this.securityGroup = new aws_ec2_1.SecurityGroup(this, "SecurityGroup", securityGroupProps);
        aws_cdk_lib_1.Tags.of(this).add("Name", `${securityGroupProps.securityGroupName}`);
        aws_cdk_lib_1.Tags.of(this).add("Owner", props.resourceOwner);
        aws_cdk_lib_1.Tags.of(this).add("Environment", props.awsEnvironment);
    }
}
exports.CustomSecurityGroupConstruct = CustomSecurityGroupConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHktZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvc2VjdXJpdHktZ3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQW1DO0FBQ25DLGlEQUs2QjtBQUM3QixpREFBc0Q7QUFDdEQsMkNBQXVDO0FBQ3ZDLDZCQUF3QjtBQUN4QixpREFBeUQ7QUFDekQsbUNBQXVDO0FBRXZDLE1BQU0sS0FBSyxHQUFHLElBQUksb0JBQVksRUFBRSxDQUFDO0FBRWpDOzs7Ozs7R0FNRztBQUNVLFFBQUEseUJBQXlCLEdBQUcsc0NBQXVCLENBQUMsSUFBSSxDQUFDO0lBQ3JFLFlBQVksRUFBRSxJQUFJO0NBQ2xCLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDVCxZQUFZLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO0NBQ3hDLENBQUMsQ0FBQztBQWFILE1BQWEsNEJBQTZCLFNBQVEsc0JBQVM7SUFLMUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBK0I7UUFDeEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBRzdDLGlDQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFFRCxNQUFNLE1BQU0sR0FDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUM7UUFFakUsTUFBTSxLQUFLLEdBQUcseUJBQWUsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLEdBQUcsR0FBRyxhQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7WUFDdEMsS0FBSztZQUNMLE1BQU07U0FDTixDQUFDLENBQUM7UUFFSCxNQUFNLGtCQUFrQixHQUF1QjtZQUM5QyxpQkFBaUIsRUFBRSxHQUFHLEtBQUssQ0FBQyxZQUFZLEtBQUs7WUFDN0MsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDLFlBQVksS0FBSztZQUN2QyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDYixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLGtCQUFrQixFQUFFLElBQUk7U0FDeEIsQ0FBQztRQUNGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDbkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLHVCQUFhLENBQ3JDLElBQUksRUFDSixlQUFlLEVBQ2Ysa0JBQWtCLENBQ2xCLENBQUM7UUFFRixrQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hELGtCQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRDtBQXRERCxvRUFzREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYWdzIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQge1xuXHR0eXBlIElWcGMsXG5cdFNlY3VyaXR5R3JvdXAsXG5cdHR5cGUgU2VjdXJpdHlHcm91cFByb3BzLFxuXHRWcGMsXG59IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWMyXCI7XG5pbXBvcnQgeyBTdHJpbmdQYXJhbWV0ZXIgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNzbVwiO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyBDdXN0b21SZXNvdXJjZVRhZ1NjaGVtYSB9IGZyb20gXCIuL3Jlc291cmNlLXRhZ1wiO1xuaW1wb3J0IHsgUHVsc2lmaVV0aWxzIH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuY29uc3QgdXRpbHMgPSBuZXcgUHVsc2lmaVV0aWxzKCk7XG5cbi8qKlxuICogQ3VzdG9tU2VjdXJpdHlHcm91cFNjaGVtYVxuICpcbiAqIEBwYXJhbSByZXNvdXJjZU5hbWVcbiAqIEBwYXJhbSBhd3NFbnZpcm9ubWVudCB7QGxpbmsgQXdzRW52aXJvbm1lbnR9XG4gKiBAcGFyYW0gcmVzb3VyY2VPd25lciB7QGxpbmsgUHVsc2lmaVRlYW19XG4gKi9cbmV4cG9ydCBjb25zdCBDdXN0b21TZWN1cml0eUdyb3VwU2NoZW1hID0gQ3VzdG9tUmVzb3VyY2VUYWdTY2hlbWEub21pdCh7XG5cdHJlc291cmNlTmFtZTogdHJ1ZSxcbn0pLmV4dGVuZCh7XG5cdHJlc291cmNlTmFtZTogei5zdHJpbmcoKS5taW4oMSkubWF4KDI1MiksXG59KTtcblxuLyoqXG4gKiBDdXN0b21TZWN1cml0eUdyb3VwUHJvcHNcbiAqXG4gKiBAcGFyYW0gcmVzb3VyY2VOYW1lXG4gKiBAcGFyYW0gYXdzRW52aXJvbm1lbnQge0BsaW5rIEF3c0Vudmlyb25tZW50fVxuICogQHBhcmFtIHJlc291cmNlT3duZXIge0BsaW5rIFB1bHNpZmlUZWFtfVxuICovXG5leHBvcnQgdHlwZSBDdXN0b21TZWN1cml0eUdyb3VwUHJvcHMgPSB6LmluZmVyPFxuXHR0eXBlb2YgQ3VzdG9tU2VjdXJpdHlHcm91cFNjaGVtYVxuPjtcblxuZXhwb3J0IGNsYXNzIEN1c3RvbVNlY3VyaXR5R3JvdXBDb25zdHJ1Y3QgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuXHRwdWJsaWMgcmVhZG9ubHkgc2VjdXJpdHlHcm91cE5hbWU6IHN0cmluZztcblx0cHVibGljIHJlYWRvbmx5IHNlY3VyaXR5R3JvdXA6IFNlY3VyaXR5R3JvdXA7XG5cdHB1YmxpYyByZWFkb25seSB2cGM6IElWcGM7XG5cblx0LyoqXG5cdCAqIEN1c3RvbVNlY3VyaXR5R3JvdXBDb25zdHJ1Y3Rcblx0ICpcblx0ICogQHJlYWRvbmx5IHNlY3VyaXR5R3JvdXBOYW1lXG5cdCAqIEByZWFkb25seSBzZWN1cml0eUdyb3VwXG5cdCAqIEByZWFkb25seSB2cGNcblx0ICpcblx0ICogQHBhcmFtIHNjb3BlIHtAbGluayBDb25zdHJ1Y3R9XG5cdCAqIEBwYXJhbSBpZFxuXHQgKiBAcGFyYW0gcHJvcHMge0BsaW5rIEN1c3RvbVNlY3VyaXR5R3JvdXBQcm9wc31cblx0ICovXG5cdGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDdXN0b21TZWN1cml0eUdyb3VwUHJvcHMpIHtcblx0XHRzdXBlcihzY29wZSwgaWQpO1xuXG5cdFx0Y29uc3Qgem9kQ2hlY2tPdXRwdXQgPSB1dGlscy52ZXJpZnlDdXN0b21TY2hlbWE8XG5cdFx0XHR0eXBlb2YgQ3VzdG9tU2VjdXJpdHlHcm91cFNjaGVtYSxcblx0XHRcdEN1c3RvbVNlY3VyaXR5R3JvdXBQcm9wc1xuXHRcdD4oQ3VzdG9tU2VjdXJpdHlHcm91cFNjaGVtYSwgcHJvcHMpO1xuXHRcdGlmICghem9kQ2hlY2tPdXRwdXQuc3VjY2Vzcykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHpvZENoZWNrT3V0cHV0Lm1lc3NhZ2UpKTtcblx0XHR9XG5cblx0XHRjb25zdCByZWdpb24gPVxuXHRcdFx0cHJvY2Vzcy5lbnYuQ0RLX0RFUExPWV9SRUdJT04gPz8gcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OO1xuXG5cdFx0Y29uc3QgdnBjSWQgPSBTdHJpbmdQYXJhbWV0ZXIudmFsdWVGcm9tTG9va3VwKHRoaXMsIFwiL2NvbmZpZ3MvVlBDSURcIik7XG5cdFx0dGhpcy52cGMgPSBWcGMuZnJvbUxvb2t1cCh0aGlzLCBcIlZQQ1wiLCB7XG5cdFx0XHR2cGNJZCxcblx0XHRcdHJlZ2lvbixcblx0XHR9KTtcblxuXHRcdGNvbnN0IHNlY3VyaXR5R3JvdXBQcm9wczogU2VjdXJpdHlHcm91cFByb3BzID0ge1xuXHRcdFx0c2VjdXJpdHlHcm91cE5hbWU6IGAke3Byb3BzLnJlc291cmNlTmFtZX0tc2dgLFxuXHRcdFx0ZGVzY3JpcHRpb246IGAke3Byb3BzLnJlc291cmNlTmFtZX0tc2dgLFxuXHRcdFx0dnBjOiB0aGlzLnZwYyxcblx0XHRcdGFsbG93QWxsT3V0Ym91bmQ6IHRydWUsXG5cdFx0XHRkaXNhYmxlSW5saW5lUnVsZXM6IHRydWUsXG5cdFx0fTtcblx0XHR0aGlzLnNlY3VyaXR5R3JvdXBOYW1lID0gYCR7c2VjdXJpdHlHcm91cFByb3BzLnNlY3VyaXR5R3JvdXBOYW1lfWA7XG5cdFx0dGhpcy5zZWN1cml0eUdyb3VwID0gbmV3IFNlY3VyaXR5R3JvdXAoXG5cdFx0XHR0aGlzLFxuXHRcdFx0XCJTZWN1cml0eUdyb3VwXCIsXG5cdFx0XHRzZWN1cml0eUdyb3VwUHJvcHMsXG5cdFx0KTtcblxuXHRcdFRhZ3Mub2YodGhpcykuYWRkKFwiTmFtZVwiLCBgJHtzZWN1cml0eUdyb3VwUHJvcHMuc2VjdXJpdHlHcm91cE5hbWV9YCk7XG5cdFx0VGFncy5vZih0aGlzKS5hZGQoXCJPd25lclwiLCBwcm9wcy5yZXNvdXJjZU93bmVyKTtcblx0XHRUYWdzLm9mKHRoaXMpLmFkZChcIkVudmlyb25tZW50XCIsIHByb3BzLmF3c0Vudmlyb25tZW50KTtcblx0fVxufVxuIl19